Home
Docs 
New
Tutorials 
Dev Tools 
GitHub
v2.7.0-beta3
Aliases
Command
Function
Options
Variables
Absorbed blocks
Affected Entities
Age of Block/Entity
All Banned Players/IPs
All Groups
All Operators
All Permissions
All Scripts
All commands
Alphabetical Sort
Altitude
Amount
Amount of Items
Anvil Text Input
Applied Enchantments
Argument
Arithmetic
Armour Slot
Arrow Knockback Strength
Arrows Stuck
Attack Cooldown
Attacked
Attacker
Bed
Biome
Block
Block
Block Break Speed
Block Data
Block Hardness
Block Sphere
Blocks
Blocks in Region
Book Author
Book Pages
Book Title
Burn/Cook Time
Case Text
Chat Format
Chat Recipients
Chunk
Clicked Block/Entity/Inventory/Slot
Color of
Colored / Uncolored
Command
Command Info
Command Sender
Compass Target
Console
Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission
Coordinate
Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc.
Cursor Slot
Custom Chest Inventory
Custom Model Data
Damage
Damage Cause
Damage Value/Durability
Damaged Item
Date Ago/Later
Default Value
Difference
Difficulty
Direction
Distance
Drops
Drops Of Block
Element of
Enchant Item
Enchanting Experience Cost
Enchantment Bonus
Enchantment Level
Enchantment Offer
Enchantment Offer Cost
Ender Chest
Entities
Entity AI
Entity Attribute
Entity Fire Burn Duration
Entity Owner
Exhaustion
Experience
Exploded Blocks
Explosion Block Yield
Explosion Yield
Explosive Yield
Facing
Fall Distance
Fertilized Blocks
Filter
Filter Input
Final Damage
Firework Effect
Flight Mode
Food Level
Formatted Date
Former/Future State
Freeze Time
Furnace Slot
Game Mode
Gamerule Value
Gliding State
Glowing
Gravity
Group
Hanging Entity/Remover
Hash
Hatching Entity Type
Hatching Number
Head location
Heal Amount
Heal Reason
Health
Hidden Players
Highest Solid Block
Hostname
Hotbar Button
Hotbar Slot
Hover List
Humidity
IP
Index Of
Indices of List
Inventory
Inventory Action
Inventory Holder/Viewers/Rows/Slots
Inventory Slot
Item
Item Amount
Item Enchantments
Item of an Entity
Item with CustomModelData
Item with Lore
Items
Items In
Join & Split
Language
Last Attacker
Last Color
Last Damage
Last Damage Cause
Last Loaded Server Icon
Last Resource Pack Response
Last Spawned Entity
Last/First Login Time
Leash Holder
Length
Level
Level Progress
Light Level
Loaded Plugins
Location
Location
Location
Location At
Loop value
Loot
Lore
MOTD
Max Durability
Max Health
Max Minecart Speed
Max Players
Maximum Freeze Time
Maximum Stack Size
Me
Mending Repair Amount
Message
Metadata
Middle of Location
Minecart Derailed / Flying Velocity
Money
Moon Phase
Moved blocks
Name / Display Name / Tab List Name
Name / Display Name / Tab List Name
Named Item/Inventory
Nearest Entity
New Line
No Damage Ticks
Now
Number of Characters
Numbers
Offline players
Online Player Count
Opened Inventory
Parse
Parse Error
Passenger
Pi
Pickup Delay
Ping
Plain Item
Player List Header and Footer
Player Protocol Version
Player Skull
Player Weather
Portal
Potion Effect
Potion Effect Tier
Potion Effects
Prefix/Suffix
Projectile Bounce State
Projectile Critical State
Protocol Version
Random
Random Number
Random UUID
Raw Name
Raw String
Redstone Block Power
Region
Region Members & Owners
Regions At
Remaining Air
Respawn Anchor Charges
Respawn location
Reversed List
Rounding
Saturation
Scoreboard Tags
Script Name
Sea Level
Sea Pickles
Server Icon
Sets
Shooter
Shuffled List
Sign Text
Slot Index
Sorted List
Source Block
Spawn
Spawn Reason
Spawner Type
Special Number
Spectator Target
Speed
Substring
TPS (ticks per second)
Tamer
Target
Targeted Block
Teleport Cause
Temperature
Ternary
The Egg
Time
Time Played
Time Since
Tool
Total Experience
Type of
UUID
Unbreakable Items
Unix Date
Unix Timestamp
Value Within
Vectors - Angle Between
Vectors - Arithmetic
Vectors - Create from XYZ
Vectors - Cross Product
Vectors - Cylindrical Shape
Vectors - Dot Product
Vectors - Length
Vectors - Location Vector Offset
Vectors - Normalized
Vectors - Random Vector
Vectors - Spherical Shape
Vectors - Squared Length
Vectors - Vector Between Locations
Vectors - Vector from Location
Vectors - Vector from Pitch and Yaw
Vectors - Velocity
Vectors - XYZ Component
Vehicle
Version
Version String
View Distance
View Distance of Client
Weather
Whitelist
World
World Environment
World Seed
World from Name
Worlds
X Times
X of Item
Yaw / Pitch
Action Bar
Ban
Break Block
Broadcast
Cancel Command Cooldown
Cancel Drops
Cancel Event
Change: Set/Add/Remove/Delete/Reset
Charge Creeper
Color Items
Command
Connect
Continue
Damage/Heal/Repair
Delay
Do If
Drop
Enable/Disable/Reload Script File
Enchant/Disenchant
Equip
Exit
Explode Creeper
Explosion
Feed
Force Attack
Force Respawn
Hide Player from Server List
Ignite/Extinguish
Keep Inventory / Experience
Kick
Kill
Knockback
Launch firework
Leash entities
Lightning
Load Server Icon
Locally Suppress Warning
Log
Look At
Make Egg Hatch
Make Fly
Make Incendiary
Make Invisible
Make Invulnerable
Make Say
Message
Open Book
Open/Close Inventory
Pathfind
Play Effect
Play Sound
Player Info Visibility
Player Visibility
Poison/Cure
Potion Effects
Push
PvP
Replace
Return
Send Block Change
Send Resource Pack
Shear
Shoot
Silence Entity
Stop Server
Stop Sound
Swing Hand
Teleport
Title - Reset
Title - Send
Toggle
Toggle Flight
Tree
Vectors - Rotate Around Vector
Vectors - Rotate around XYZ
Vehicle
op/deop
Spawn
Alphanumeric
Can Build
Can Fly
Can Hold
Can See
Chance
Comparison
Contains
Damage Cause
Do Respawn Anchors Work
Egg Will Hatch
Entity is Wet
Entity is in Liquid
Event Cancelled
Exists/Is Set
Has AI
Has Client Weather
Has Custom Model Data
Has Metadata
Has Permission
Has Played Before
Has Potion
Has Resource Pack
Has Scoreboard Tag
Ignition Process
Is Alive
Is Banned
Is Bed/Anchor Spawn
Is Block
Is Block Redstone Powered
Is Blocking
Is Burning
Is Charged
Is Edible
Is Empty
Is Enchanted
Is Flammable
Is Flying
Is Frozen
Is Fuel
Is Gliding
Is Holding
Is Incendiary
Is Interactable
Is Invisible
Is Invulnerable
Is Leashed
Is Loaded
Is Member/Owner of Region
Is Normalized
Is Occluding
Is Online
Is Operator
Is Passable
Is Plugin Enabled
Is Poisoned
Is Preferred Tool
Is Riding
Is Riptiding
Is Script Loaded
Is Silent
Is Sleeping
Is Slime Chunk
Is Sneaking
Is Solid
Is Sprinting
Is Stackable
Is Swimming
Is Tameable
Is Transparent
Is Unbreakable
Is Valid
Is Wearing
Is Whitelisted
Is Within
Is Within Location
Is Within Radius
Is a Skript command
Is of Type
Is on Ground
Matches
Method Exists
Projectile Can Bounce
PvP
Region Contains
Resource Pack
Running Minecraft
Starts/Ends With
Time
Conditionals
Loop
While Loop
At Time
On Anvil Damage
On Anvil Prepare
On AoE Cloud Effect
On Arm Swing
On Armor Change
On Bed Enter
On Bed Leave
On Block Damage
On Block Fertilize
On Block Growth
On Book Edit
On Book Sign
On Break / Mine
On Bucket Empty
On Bucket fill
On Burn
On Can Build Check
On Chat
On Chunk Generate
On Chunk Load
On Chunk Unload
On Click
On Combust
On Command
On Connect
On Consume
On Craft
On Creeper Power
On Damage
On Death
On Dispense
On Drop
On Egg Throw
On Enchant
On Enchant Prepare
On Enderman/Sheep/Silverfish/Falling Block
On Entity Dismount
On Entity Jump
On Entity Mount
On Entity Portal
On Experience Change
On Experience Spawn
On Explode
On Explosion Prime
On Fade
On Firework Explode
On First Join
On Fishing
On Flight Toggle
On Flow
On Form
On Fuel Burn
On Gamemode Change
On Gliding State Change
On Grow
On Hand Item Swap
On Heal
On Horse Jump
On Hunger Meter Change
On Ignition
On Inventory Click
On Inventory Close
On Inventory Open
On Inventory Pickup
On Inventory Slot Change
On Item Break
On Item Damage
On Item Despawn
On Item Mend
On Item Merge
On Item Spawn
On Join
On Jump
On Kick
On Language Change
On Leaves Decay
On Level Change
On Lightning Strike
On Loot Generate
On Move
On Move On
On Physics
On Pick Up
On Pig Zap
On Piston Extend
On Piston Retract
On Place
On Player Chunk Enters
On Player Deep Sleep
On Player Trade
On Player World Change
On Portal
On Portal Create
On Portal Enter
On Prepare Craft
On Pressure Plate / Trip
On Projectile Collide
On Projectile Hit
On Quit
On Redstone
On Region Enter/Leave
On Resource Pack Request Response
On Respawn
On Resurrect Attempt
On Riptide
On Script Load/Unload
On Server List Ping
On Server Start/Stop
On Sheep Regrow Wool
On Shoot
On Sign Change
On Slime Split
On Smelt
On Sneak Toggle
On Spawn
On Spawn Change
On Spectate
On Sponge Absorb
On Spread
On Sprint Toggle
On Swim Toggle
On Tame
On Target
On Teleport
On Test Case
On Tool Change
On Vehicle Create
On Vehicle Damage
On Vehicle Destroy
On Vehicle Enter
On Vehicle Exit
On Weather Change
On World Init
On World Load
On World Save
On World Unload
On Zombie Break Door
Periodical
Periodical
Attribute Type
Biome
Block
Block Data
Boolean
Cat Type
Chunk
Click Type
Color
Command Sender
Damage Cause
Date
Difficulty
Direction
Enchantment
Enchantment Offer
Enchantment Type
Entity
Entity Type
Entity Type with Amount
Experience
Firework Effect
Firework Type
Game Mode
Gamerule
Gamerule Value
Gene
Heal Reason
Inventory
Inventory Action
Inventory Slot
Inventory Type
Item
Item Type
Living Entity
Location
Metadata Holder
Money
Moon Phase
Number
Object
Offline Player
Player
Potion Effect
Potion Effect Type
Projectile
Region
Resource Pack State
Server Icon
Sound Category
Spawn Reason
Teleport Cause
Text
Time
Timeperiod
Timespan
Tree Type
Type
Vector
Visual Effect
Weather Type
World
World Environment
abs
acos
asin
atan
atan2
calcExperience
caseEquals
ceil
ceiling
cos
date
exp
floor
ln
location
log
max
min
mod
product
rgb
round
sin
sqrt
sum
tan
vector
world
Search the docs 🔍

Aliases 🔗Structure
Patterns:	
aliases
Since:	1.0
Used for registering custom aliases for a script.
Examples:

Command 🔗Structure
Patterns:	
command <.+>
Required Entries:	trigger
Optional Entries:	usage, description, prefix, permission, permission message, aliases, executable by, cooldown, cooldown message, cooldown bypass, cooldown storage
Since:	1.0
Used for registering custom commands.
Examples:

Function 🔗Structure
Patterns:	
[local] function <([\p{IsAlphabetic}][\p{IsAlphabetic}\p{IsDigit}_]*)\((.*)\)(\s*::\s*(.+))?>
Since:	2.2, 2.7 (local functions)
Functions are structures that can be executed with arguments/parameters to run code. They can also return a value to the trigger that is executing the function. Note that local functions come before global functions execution
Examples:

Options 🔗Structure
Patterns:	
options
Since:	1.0
Options are used for replacing parts of a script with something else. For example, an option may represent a message that appears in multiple locations. Take a look at the example below that showcases this.
Examples:

Variables 🔗Structure
Patterns:	
variables
Since:	1.0
Used for defining variables present within a script. This section is not required, but it ensures that a variable has a value if it doesn't exist when the script is loaded.
Examples:

Absorbed blocks 🔗Expression
Patterns:	
[the] absorbed blocks
Since:	2.5
Usable in events:	sponge absorb
Return Type:	Block
The blocks absorbed by a sponge block.
Examples:

Affected Entities 🔗Expression
Patterns:	
[the] affected entities
Since:	2.4
Return Type:	Living Entity
The affected entities in the area cloud effect event.
Examples:

Age of Block/Entity 🔗Expression
Patterns:	
[the] [max[imum]] age of %blocks/entities%
%blocks/entities%'[s] [max[imum]] age
Since:	2.7
Return Type:	integer
Returns the age or maximum age of blocks and age for entities (there in no maximum age for entities). For blocks, 'Age' represents the different growth stages that a crop-like block can go through. A value of 0 indicates that the crop was freshly planted, whilst a value equal to 'maximum age' indicates that the crop is ripe and ready to be harvested. For entities, 'Age' represents the time left for them to become adults and it's in minus increasing to be 0 which means they're adults, e.g. A baby cow needs 20 minutes to become an adult which equals to 24,000 ticks so their age will be -24000 once spawned.
Examples:

All Banned Players/IPs 🔗Expression
Patterns:	
[all [[of] the]|the] banned (players|(ips|ip addresses))
Since:	2.7
Return Type:	Object
Obtains the list of all banned players or IP addresses.
Examples:

All Groups 🔗Expression
Patterns:	
all groups
Since:	2.2-dev35
Requirements:	Vault, a permission plugin that supports Vault
Return Type:	Text
All the groups a player can have. This expression requires Vault and a compatible permissions plugin to be installed.
Examples:

All Operators 🔗Expression
Patterns:	
[all [[of] the]|the] [server] [non(-| )]op[erator]s
Since:	2.7
Return Type:	Offline Player
The list of operators on the server.
Examples:

All Permissions 🔗Expression
Patterns:	
[(all [[of] the]|the)] permissions (from|of) %players%
[(all [[of] the]|the)] %players%'[s] permissions
Since:	2.2-dev33
Return Type:	Text
Returns all permissions of the defined player(s). Note that the modifications to resulting list do not actually change permissions.
Examples:

All Scripts 🔗Expression
Patterns:	
[all [of the]] scripts [(without ([subdirectory] paths|parents))]
[all [of the]] (enabled|loaded) scripts [(without ([subdirectory] paths|parents))]
[all [of the]] (disabled|unloaded) scripts [(without ([subdirectory] paths|parents))]
Since:	2.5
Return Type:	Text
Returns all of the scripts, or just the enabled or disabled ones.
Examples:

All commands 🔗Expression
Patterns:	
[(all|the|all [of] the)] [registered] [script] commands
Since:	2.6
Return Type:	Text
Returns all registered commands or all script commands.
Examples:

Alphabetical Sort 🔗Expression
Patterns:	
alphabetically sorted %texts%
Since:	2.2-dev18b
Return Type:	Text
Sorts given strings in alphabetical order.
Examples:

Altitude 🔗Expression
Patterns:	
[the] altitude[s] of %locations%
%locations%'[s] altitude[s]
Since:	1.4.3
Return Type:	Number
Effectively an alias of 'y-coordinate of …', it represents the height of some object above bedrock.
Examples:

Amount 🔗Expression
Patterns:	
[the] (amount|number|size) of %objects%
[the] recursive (amount|number|size) of %objects%
Since:	1.0
Return Type:	long
The amount of something. Please note that amount of %items% will not return the number of items, but the number of stacks, e.g. 1 for a stack of 64 torches. To get the amount of items in a stack, see the item amount expression.
Also, you can get the recursive size of a list, which will return the recursive size of the list with sublists included, e.g.

 {list::*} Structure
 ├──── {list::1}: 1
 ├──── {list::2}: 2
 │ ├──── {list::2::1}: 3
 │ │ └──── {list::2::1::1}: 4
 │ └──── {list::2::2}: 5
 └──── {list::3}: 6 
Where using %size of {list::*}% will only return 3 (the first layer of indices only), while %recursive size of {list::*}% will return 6 (the entire list) Please note that getting a list's recursive size can cause lag if the list is large, so only use this expression if you need to!

Examples:

Amount of Items 🔗Expression
Patterns:	
[the] (amount|number) of %item types% (in|of) %inventories%
Since:	2.0
Return Type:	long
Counts how many of a particular item type are in a given inventory.
Examples:

Anvil Text Input 🔗Expression
Patterns:	
[the] anvil [inventory] (rename|text) input of %inventories%
%inventories%'[s] anvil [inventory] (rename|text) input
Since:	2.7
Return Type:	Text
An expression to get the name to be applied to an item in an anvil inventory.
Examples:

Applied Enchantments 🔗Expression
Patterns:	
[the] applied enchant[ment]s
Since:	2.5
Usable in events:	enchant
Return Type:	Enchantment Type
The applied enchantments in an enchant event. Deleting or removing the applied enchantments will prevent the item's enchantment.
Examples:

Argument 🔗Expression
Patterns:	
[the] last arg[ument]
[the] arg[ument](-| )<(\d+)>
[the] <(\d*1)st|(\d*2)nd|(\d*3)rd|(\d*[4-90])th> arg[ument][s]
[(all [[of] the]|the)] arg[ument][s]
[the] %*type%( |-)arg[ument][( |-)<\d+>]
[the] arg[ument]( |-)%*type%[( |-)<\d+>]
Since:	1.0, 2.7 (support for command events)
Return Type:	Object
Usable in script commands and command events. Holds the value of an argument given to the command, e.g. if the command "/tell <player> <text>" is used like "/tell Njol Hello Njol!" argument 1 is the player named "Njol" and argument 2 is "Hello Njol!". One can also use the type of the argument instead of its index to address the argument, e.g. in the above example 'player-argument' is the same as 'argument 1'. Please note that specifying the argument type is only supported in script commands.
Examples:

Arithmetic 🔗Expression
Patterns:	
\(%number%\)[ ]+[ ]\(%number%\)
\(%number%\)[ ]+[ ]%number%
%number%[ ]+[ ]\(%number%\)
%number%[ ]+[ ]%number%
\(%number%\)[ ]-[ ]\(%number%\)
\(%number%\)[ ]-[ ]%number%
%number%[ ]-[ ]\(%number%\)
%number%[ ]-[ ]%number%
\(%number%\)[ ]*[ ]\(%number%\)
\(%number%\)[ ]*[ ]%number%
%number%[ ]*[ ]\(%number%\)
%number%[ ]*[ ]%number%
\(%number%\)[ ]/[ ]\(%number%\)
\(%number%\)[ ]/[ ]%number%
%number%[ ]/[ ]\(%number%\)
%number%[ ]/[ ]%number%
\(%number%\)[ ]^[ ]\(%number%\)
\(%number%\)[ ]^[ ]%number%
%number%[ ]^[ ]\(%number%\)
%number%[ ]^[ ]%number%
Since:	1.4.2
Return Type:	Number
Arithmetic expressions, e.g. 1 + 2, (health of player - 2) / 3, etc.
Examples:

Armour Slot 🔗Expression
Patterns:	
[the] (boot[s]|shoe[s]|leg[ging][s]|chestplate[s]|helm[et][s]) [(item|slot)] of %living entities%
%living entities%'[s] (boot[s]|shoe[s]|leg[ging][s]|chestplate[s]|helm[et][s]) [(item|slot)]
Since:	1.0
Return Type:	Inventory Slot
A part of a player's armour, i.e. the boots, leggings, chestplate or helmet.
Examples:

Arrow Knockback Strength 🔗Expression
Patterns:	
[the] arrow knockback strength of %projectiles%
%projectiles%'[s] arrow knockback strength
Since:	2.5.1
Return Type:	long
An arrow's knockback strength.
Examples:

Arrows Stuck 🔗Expression
Patterns:	
[number of] arrow[s] stuck in %living entities%
Since:	2.5
Return Type:	long
The number of arrows stuck in a living entity.
Examples:

Attack Cooldown 🔗Expression
Patterns:	
[the] attack cooldown of %players%
%players%'[s] attack cooldown
Since:	2.6.1
Requirements:	Minecraft 1.15+
Return Type:	float
Returns the current cooldown for a player's attack. This is used to calculate damage, with 1.0 representing a fully charged attack and 0.0 representing a non-charged attack. NOTE: Currently this can not be set to anything.
Examples:

Attacked 🔗Expression
Patterns:	
[the] (attacked|damaged|victim) [<(.+)>]
Since:	1.3, 2.6.1 (projectile hit event)
Usable in events:	damage, death, projectile hit
Return Type:	Entity
The victim of a damage event, e.g. when a player attacks a zombie this expression represents the zombie. When using Minecraft 1.11+, this also covers the hit entity in a projectile hit event.
Examples:

Attacker 🔗Expression
Patterns:	
[the] (attacker|damager)
Since:	1.3
Usable in events:	damage, death, destroy
Return Type:	Entity
The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player. Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases.
Examples:

Bed 🔗Expression
Patterns:	
[the] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]] of %offline players%
%offline players%'[s] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]]
Since:	2.0, 2.7 (offlineplayers, safe bed)
Return Type:	Location
Returns the bed location of a player, i.e. the spawn point of a player if they ever slept in a bed and the bed still exists and is unobstructed however, you can set the unsafe bed location of players and they will respawn there even if it has been obstructed or doesn't exist anymore and that's the default behavior of this expression otherwise you will need to be specific i.e. safe bed location.
NOTE: Offline players can not have their bed location changed, only online players.

Examples:

Biome 🔗Expression
Patterns:	
[the] biome [(of|%direction%) %locations%]
%locations%'[s] biome
Since:	1.4.4, 2.6.1 (3D biomes)
Return Type:	Biome
The biome at a certain location. Please note that biomes are only defined for x/z-columns (i.e. the altitude (y-coordinate) doesn't matter), up until Minecraft 1.15.x. As of Minecraft 1.16, biomes are now 3D (per block vs column).
Examples:

Block 🔗Expression
Patterns:	
[the] [event-]block
Since:	1.0
Return Type:	Block
The block involved in the event, e.g. the clicked block or the placed block. Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
Examples:

Block 🔗Expression
Patterns:	
[the] block %direction% [%location%]
Since:	1.0
Return Type:	Block
The block involved in the event, e.g. the clicked block or the placed block. Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
Examples:

Block Break Speed 🔗Expression
Patterns:	
[the] break speed[s] [of %blocks%] [for %players%]
%block%'[s] break speed[s] [for %players%]
Since:	2.7
Requirements:	1.17+
Return Type:	float
Gets the speed at which the given player would break this block, taking into account tools, potion effects, whether or not the player is in water, enchantments, etc. The returned value is the amount of progress made in breaking the block each tick. When the total breaking progress reaches 1.0, the block is broken. Note that the break speed can change in the course of breaking a block, e.g. if a potion effect is applied or expires, or the player jumps/enters water.
Examples:

Block Data 🔗Expression
Patterns:	
[the] block[ ]data of %blocks%
%blocks%'[s] block[ ]data
Since:	2.5, 2.5.2 (set)
Requirements:	Minecraft 1.13+
Return Type:	Block Data
Get the block data associated with a block. This data can also be used to set blocks.
Examples:

Block Hardness 🔗Expression
Patterns:	
[the] [block] hardness of %item types%
%item types%'[s] [block] hardness
Since:	2.6
Requirements:	Minecraft 1.13+
Return Type:	Number
Obtains the block's hardness level (also known as "strength"). This number is used to calculate the time required to break each block.
Examples:

Block Sphere 🔗Expression
Patterns:	
[(all [[of] the]|the)] blocks in radius %number% [(of|around) %location%]
[(all [[of] the]|the)] blocks around %location% in radius %number%
Since:	1.0
Return Type:	Block
All blocks in a sphere around a center, mostly useful for looping.
Examples:

Blocks 🔗Expression
Patterns:	
[(all [[of] the]|the)] blocks %direction% [%locations%]
[(all [[of] the]|the)] blocks from %location% [on] %direction%
[(all [[of] the]|the)] blocks from %location% to %location%
[(all [[of] the]|the)] blocks between %location% and %location%
[(all [[of] the]|the)] blocks within %location% and %location%
[(all [[of] the]|the)] blocks (in|within) %chunk%
Since:	1.0, 2.5.1 (within/cuboid/chunk)
Return Type:	Block
Blocks relative to other blocks or between other blocks. Can be used to get blocks relative to other blocks or for looping. Blocks from/to and between will return a straight line whereas blocks within will return a cuboid.
Examples:

Blocks in Region 🔗Expression
Patterns:	
[(all|the)] blocks (in|of) [[the] region[s]] %regions%
Since:	2.1
Requirements:	Supported regions plugin
Return Type:	Block
All blocks in a region. This expression requires a supported regions plugin to be installed.
Examples:

Book Author 🔗Expression
Patterns:	
[the] [book] (author|writer|publisher) of %item types%
%item types%'[s] [book] (author|writer|publisher)
Since:	2.2-dev31
Return Type:	Text
The author of a book.
Examples:

Book Pages 🔗Expression
Patterns:	
[all [[of] the]|the] [book] (pages|content) of %item types%
%item types%'[s] [book] (pages|content)
[book] page %number% of %item types%
%item types%'[s] [book] page %number%
Since:	2.2-dev31, 2.7 (changers)
Return Type:	Text
The pages of a book.
Examples:

Book Title 🔗Expression
Patterns:	
[the] book (name|title) of %item types%
%item types%'[s] book (name|title)
Since:	2.2-dev31
Return Type:	Text
The title of a book.
Examples:

Burn/Cook Time 🔗Expression
Patterns:	
[the] burn[ing] time
[the] (burn|cook)[ing] time of %blocks%
%blocks%'[s] (burn|cook)[ing] time
Since:	2.3
Return Type:	Timespan
The time a furnace takes to burn an item in a fuel burn event. Can also be used to change the burn/cook time of a placed furnace.
Examples:

Case Text 🔗Expression
Patterns:	
%texts% in (upper|lower)[ ]case
(upper|lower)[ ]case %texts%
capitali(s|z)ed %texts%
%texts% in [(lenient|strict) ](proper|title)[ ]case
[(lenient|strict) ](proper|title)[ ]case %texts%
%texts% in [(lenient|strict) ]camel[ ]case
[(lenient|strict) ]camel[ ]case %texts%
%texts% in [(lenient|strict) ]pascal[ ]case
[(lenient|strict) ]pascal[ ]case %texts%
%texts% in [(lower|upper|capital|screaming)[ ]]snake[ ]case
[(lower|upper|capital|screaming)[ ]]snake[ ]case %texts%
%texts% in [(lower|upper|capital)[ ]]kebab[ ]case
[(lower|upper|capital)[ ]]kebab[ ]case %texts%
Since:	2.2-dev16 (lowercase and uppercase), 2.5 (advanced cases)
Return Type:	Text
Copy of given text in Lowercase, Uppercase, Proper Case, camelCase, PascalCase, Snake_Case, and Kebab-Case
Examples:

Chat Format 🔗Expression
Patterns:	
[the] (message|chat) format[ting]
Since:	2.2-dev31
Return Type:	Text
Can be used to get/retrieve the chat format. The sender of a message is represented by [player] or [sender], and the message by [message] or [msg].
Examples:

Chat Recipients 🔗Expression
Patterns:	
[chat][( |-)]recipients
Since:	2.2-Fixes-v7, 2.2-dev35 (clearing recipients)
Return Type:	Player
Recipients of chat events where this is called.
Examples:

Chunk 🔗Expression
Patterns:	
[the] chunk[s] (of|%directions%) %locations%
%locations%'[s] chunk[s]
Since:	2.0
Return Type:	Chunk
The chunk a block, location or entity is in.
Examples:

Clicked Block/Entity/Inventory/Slot 🔗Expression
Patterns:	
[the] (clicked [enchant[ment]] (button|option)|clicked (block|%*item type/entity type%)|clicked slot|clicked inventory|click (type|action)|inventory action)
Since:	1.0, 2.2-dev35 (more clickable things)
Usable in events:	click, inventory click
Return Type:	Object
The clicked block, entity, inventory, inventory slot, inventory click type or inventory action.
Examples:

Color of 🔗Expression
Patterns:	
[the] colo[u]r[s] of %blocks/item types/entities/firework effects%
%blocks/item types/entities/firework effects%'[s] colo[u]r[s]
Since:	1.2
Return Type:	Color
The color of an item, can also be used to color chat messages with "<%color of ...%>this text is colored!".
Examples:

Colored / Uncolored 🔗Expression
Patterns:	
(colo[u]r-|colo[u]red )%texts%
(format-|formatted )%texts%
(un|non)[-](colo[u]r-|colo[u]red |format-|formatted )%texts%
Since:	2.0
Return Type:	Text
Parses <color>s and, optionally, chat styles in a message or removes any colors and chat styles from the message. Parsing all chat styles requires this expression to be used in same line with the send effect.
Examples:

Command 🔗Expression
Patterns:	
[the] (full|complete|whole) command
[the] command [(label|alias)]
Since:	2.0, 2.7 (support for script commands)
Usable in events:	command
Return Type:	Text
The command that caused an 'on command' event (excluding the leading slash and all arguments)
Examples:

Command Info 🔗Expression
Patterns:	
[the] main command [label] of command %texts%
command %texts%'[s] main command [name]
[the] description of command %texts%
command %texts%'[s] description
[the] label of command %texts%
command %texts%'[s] label
[the] usage of command %texts%
command %texts%'[s] usage
[(all|the|all [of] the)] aliases of command %texts%
command %texts%'[s] aliases
[the] permission of command %texts%
command %texts%'[s] permission
[the] permission message of command %texts%
command %texts%'[s] permission message
[the] plugin [owner] of command %texts%
command %texts%'[s] plugin [owner]
Since:	2.6
Return Type:	Text
Get information about a command.
Examples:

Command Sender 🔗Expression
Patterns:	
[the] [command['s]] (sender|executor)
Since:	2.0
Usable in events:	command
Return Type:	Command Sender
The player or the console who sent a command. Mostly useful in commands and command events. If the command sender is a command block, its location can be retrieved by using %block's location%
Examples:

Compass Target 🔗Expression
Patterns:	
[the] compass target of %players%
%players%'[s] compass target
Since:	2.0
Return Type:	Location
The location a player's compass is pointing at.
Examples:

Console 🔗Expression
Patterns:	
[the] (console|server)
Since:	1.3.1
Return Type:	Command Sender
Represents the server's console which can receive messages and execute commands
Examples:

Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission 🔗Expression
Patterns:	
[the] remaining [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
[the] elapsed [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
[the] ((cooldown|wait) time|[wait] time of [the] (cooldown|wait) [(of|for) [the] [current] command])
[the] last usage [date] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
[the] [cooldown] bypass perm[ission] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
Since:	2.2-dev33
Return Type:	Object
Only usable in command events. Represents the cooldown time, the remaining time, the elapsed time, the last usage date, or the cooldown bypass permission.
Examples:

Coordinate 🔗Expression
Patterns:	
[the] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%
%locations%'[s] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]
Since:	1.4.3
Return Type:	Number
Represents a given coordinate of a location.
Examples:

Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc. 🔗Expression
Patterns:	
[the] [event-]<.+>
Since:	1.0
Return Type:	Entity
The entity involved in an event (an entity is a player, a creature or an inanimate object like ignited TNT, a dropped item or an arrow). You can use the specific type of the entity that's involved in the event, e.g. in a 'death of a creeper' event you can use 'the creeper' instead of 'the entity'.
Examples:

Cursor Slot 🔗Expression
Patterns:	
[the] cursor slot of %players%
%players%'[s] cursor slot
Since:	2.2-dev17
Return Type:	Inventory Slot
The item which the player has on their cursor. This slot is always empty if player has no inventories open.
Examples:

Custom Chest Inventory 🔗Expression
Patterns:	
[a] [new] chest inventory (named|with name) %text% [with %number% row[s]]
[a] [new] chest inventory with %number% row[s] [(named|with name) %text%]
Since:	2.2-dev34
Return Type:	Inventory
Returns a chest inventory with the given amount of rows and the name. Use the open inventory effect to open it.
Examples:

Custom Model Data 🔗Expression
Patterns:	
[the] [custom] model data of %item types%
%item types%'[s] [custom] model data
Since:	2.5
Requirements:	1.14+
Return Type:	long
Get/set the CustomModelData tag for an item. (Value is an integer between 0 and 99999999)
Examples:

Damage 🔗Expression
Patterns:	
[the] damage
Since:	1.3.5
Usable in events:	damage
Return Type:	Number
How much damage is done in a damage event, possibly ignoring armour, criticals and/or enchantments. Can be changed (remember that in Skript '1' is one full heart, not half a heart).
Examples:

Damage Cause 🔗Expression
Patterns:	
[the] damage (cause|type)
Since:	2.0
Return Type:	Damage Cause
The damage cause of a damage event. Please click on the link for more information.
Examples:

Damage Value/Durability 🔗Expression
Patterns:	
[the] (damage[s] [value[s]]|durabilit(y|ies)) of %item types/slots%
%item types/slots%'[s] (damage[s] [value[s]]|durabilit(y|ies))
Since:	1.2, 2.7 (durability reversed)
Return Type:	long
The damage value/durability of an item.
Examples:

Damaged Item 🔗Expression
Patterns:	
%item type% with (damage|data) [value] %number%
%item type% damaged by %number%
Since:	2.4
Return Type:	Item Type
Directly damages an item. In MC versions 1.12.2 and lower, this can be used to apply data values to items/blocks
Examples:

Date Ago/Later 🔗Expression
Patterns:	
%time span% (ago|in the past|before [the] [date] %date%)
%time span% (later|(from|after) [the] [date] %date%)
Since:	2.2-dev33
Return Type:	Date
A date the specified timespan before/after another date.
Examples:

Default Value 🔗Expression
Patterns:	
%objects% (otherwise|?) %objects%
Since:	2.2-dev36
Return Type:	Object
A shorthand expression for giving things a default value. If the first thing isn't set, the second thing will be returned.
Examples:

Difference 🔗Expression
Patterns:	
difference (between|of) %object% and %object%
Since:	1.4
Return Type:	Object
The difference between two values, e.g. numbers, dates or times.
Examples:

Difficulty 🔗Expression
Patterns:	
[the] difficult(y|ies) of %worlds%
%worlds%'[s] difficult(y|ies)
Since:	2.3
Return Type:	Difficulty
The difficulty of a world.
Examples:

Direction 🔗Expression
Patterns:	
[%number% [(block|met(er|re))[s]] [to the]] (north[[(-| )](east|west)][(ward[(s|ly)]|er[(n|ly)])] [of]|south[[(-| )](east|west)][(ward[(s|ly)]|er[(n|ly)])] [of]|(east|west)[(ward[(s|ly)]|er[(n|ly)])] [of]|above|over|(up|down)[ward[(s|ly)]]|below|under[neath]|beneath) [%direction%]
[%number% [(block|met(er|re))[s]]] in [the] (direction|horizontal direction|facing|horizontal facing) of %entity/block% [(of|from)]
[%number% [(block|met(er|re))[s]]] in %entity/block%'[s] (direction|horizontal direction|facing|horizontal facing) [(of|from)]
[%number% [(block|met(er|re))[s]]] (in[ ]front [of]|forward[s]|behind|backwards|[to the] (right|left) [of])
[%number% [(block|met(er|re))[s]]] horizontal[ly] (in[ ]front [of]|forward[s]|behind|backwards|to the (right|left) [of])
Since:	1.0 (basic), 2.0 (extended)
Return Type:	Direction
A helper expression for the direction type.
Examples:

Distance 🔗Expression
Patterns:	
[the] distance between %location% and %location%
Since:	1.0
Return Type:	Number
The distance between two points.
Examples:

Drops 🔗Expression
Patterns:	
[the] drops
Since:	1.0
Usable in events:	death
Return Type:	Item Type
Only works in death events. Holds the drops of the dying creature. Drops can be prevented by removing them with "remove ... from drops", e.g. "remove all pickaxes from the drops", or "clear drops" if you don't want any drops at all.
Examples:

Drops Of Block 🔗Expression
Patterns:	
[(all|the|all [of] the)] drops of %blocks% [(using|with) %item type% [(as %entity%)]]
%blocks%'s drops [(using|with) %item type% [(as %entity%)]]
Since:	2.5.1
Requirements:	Minecraft 1.15+ ('as %entity%')
Return Type:	Item Type
A list of the items that will drop when a block is broken.
Examples:

Element of 🔗Expression
Patterns:	
([the] first|[the] last|[a] random|[the] %number%(st|nd|rd|th)|[the] %number%(st|nd|rd|th) [to] last) element [out] of %objects%
Since:	2.0, 2.7 (relative to last element)
Return Type:	Object
The first, last or a random element of a set, e.g. a list variable. See also: random
Examples:

Enchant Item 🔗Expression
Patterns:	
[the] enchant[ed] item
Since:	2.5
Usable in events:	enchant prepare, enchant
Return Type:	Item Type
The enchant item in an enchant prepare event or enchant event. It can be modified, but enchantments will still be applied in the enchant event.
Examples:

Enchanting Experience Cost 🔗Expression
Patterns:	
[the] [displayed] ([e]xp[erience]|enchanting) cost
Since:	2.5
Usable in events:	enchant
Return Type:	long
The cost of enchanting in an enchant event. This is number that was displayed in the enchantment table, not the actual number of levels removed.
Examples:

Enchantment Bonus 🔗Expression
Patterns:	
[the] enchantment bonus
Since:	2.5
Usable in events:	enchant prepare
Return Type:	long
The enchantment bonus in an enchant prepare event. This represents the number of bookshelves affecting/surrounding the enchantment table.
Examples:

Enchantment Level 🔗Expression
Patterns:	
[the] [enchant[ment]] level[s] of %enchantments% (on|of) %item types%
[the] %enchantments% [enchant[ment]] level[s] (on|of) %item types%
%item types%'[s] %enchantments% [enchant[ment]] level[s]
%item types%'[s] [enchant[ment]] level[s] of %enchantments%
Since:	2.0
Return Type:	long
The level of a particular enchantment on an item.
Examples:

Enchantment Offer 🔗Expression
Patterns:	
[all [of]] [the] enchant[ment] offers
enchant[ment] offer[s] %numbers%
[the] %number%(st|nd|rd|th) enchant[ment] offer
Since:	2.5
Usable in events:	enchant prepare
Requirements:	1.11 or newer
Return Type:	Enchantment Offer
The enchantment offer in enchant prepare events.
Examples:

Enchantment Offer Cost 🔗Expression
Patterns:	
[the] [enchant[ment]] cost of %enchantment offers%
%enchantment offers%'[s] [enchant[ment]] cost
Since:	2.5
Requirements:	1.11 or newer
Return Type:	long
The cost of an enchantment offer. This is displayed to the right of an enchantment offer. If the cost is changed, it will always be at least 1. This changes how many levels are required to enchant, but does not change the number of levels removed. To change the number of levels removed, use the enchant event.
Examples:

Ender Chest 🔗Expression
Patterns:	
[the] ender[ ]chest[s] of %players%
%players%'[s] ender[ ]chest[s]
Since:	2.0
Return Type:	Inventory
The ender chest of a player.
Examples:

Entities 🔗Expression
Patterns:	
[(all [[of] the]|the)] %*entity types% [(in|of) ([world[s]] %worlds%|%chunks%)]
[(all [[of] the]|the)] entities of type[s] %entity types% [(in|of) ([world[s]] %worlds%|%chunks%)]
[(all [[of] the]|the)] %*entity types% (within|[with]in radius) %number% [(block[s]|met(er|re)[s])] (of|around) %location%
[(all [[of] the]|the)] entities of type[s] %entity types% in radius %number% (of|around) %location%
Since:	1.2.1, 2.5 (chunks)
Return Type:	Entity
All entities in all worlds, in a specific world, in a chunk or in a radius around a certain location, e.g. all players, all creepers in the player's world, or players in radius 100 of the player.
Examples:

Entity AI 🔗Expression
Patterns:	
[the] (ai|artificial intelligence) of %living entities%
%living entities%'[s] (ai|artificial intelligence)
Since:	2.5
Return Type:	Boolean
Returns whether an entity has AI.
Examples:

Entity Attribute 🔗Expression
Patterns:	
[the] %attribute type% [((total|final|modified))] attribute [value] of %entities%
%entities%'[s] %attribute type% [((total|final|modified))] attribute [value]
Since:	2.5, 2.6.1 (final attribute value)
Return Type:	Number
The numerical value of an entity's particular attribute. Note that the movement speed attribute cannot be reliably used for players. For that purpose, use the speed expression instead. Resetting an entity's attribute is only available in Minecraft 1.11 and above.
Examples:

Entity Fire Burn Duration 🔗Expression
Patterns:	
[the] (burn[ing]|fire) (time|duration) of %entities%
%entities%'[s] (burn[ing]|fire) (time|duration)
Since:	2.7
Return Type:	Timespan
How much time an entity will be burning for.
Examples:

Entity Owner 🔗Expression
Patterns:	
[the] (owner|tamer) of %living entities%
%living entities%'[s] (owner|tamer)
Since:	2.5
Return Type:	Offline Player
The owner of a tameable entity, such as a horse or wolf.
Examples:

Exhaustion 🔗Expression
Patterns:	
[the] exhaustion of %players%
%players%'[s] exhaustion
Since:	2.2-dev35
Return Type:	Number
The exhaustion of a player. This is mainly used to determine the rate of hunger depletion.
Examples:

Experience 🔗Expression
Patterns:	
[the] [(spawned|dropped)] [e]xp[erience] [orb[s]]
Since:	2.1, 2.5.3 (block break event), 2.7 (experience change event)
Usable in events:	experience spawn, break / mine, experience change
Return Type:	Experience
How much experience was spawned in an experience spawn or block break event. Can be changed.
Examples:

Exploded Blocks 🔗Expression
Patterns:	
[the] exploded blocks
Since:	2.5
Usable in events:	explode
Return Type:	Block
Get all the blocks that were destroyed in an explode event
Examples:

Explosion Block Yield 🔗Expression
Patterns:	
[the] [explosion['s]] block (yield|amount)
[the] percentage of blocks dropped
Since:	2.5
Usable in events:	explosion
Return Type:	Number
The percentage of exploded blocks dropped in an explosion event. When changing the yield, a value greater than 1 will function the same as using 1. Attempting to change the yield to a value less than 0 will have no effect.
Examples:

Explosion Yield 🔗Expression
Patterns:	
[the] explosion (yield|radius|size)
[the] (yield|radius|size) of [the] explosion
Since:	2.5
Usable in events:	explosion prime
Return Type:	Number
The yield of the explosion in an explosion prime event. This is how big the explosion is. When changing the yield, values less than 0 will be ignored. Read this wiki page for more information
Examples:

Explosive Yield 🔗Expression
Patterns:	
[the] explosive (yield|radius|size) of %entities%
%entities%'[s] explosive (yield|radius|size)
Since:	2.5
Requirements:	Minecraft 1.12 or newer for creepers
Return Type:	Number
The yield of an explosive (creeper, primed tnt, fireball, etc.). This is how big of an explosion is caused by the entity. Read this wiki page for more information
Examples:

Facing 🔗Expression
Patterns:	
[the] [(horizontal)] facing of %living entities/blocks%
%living entities/blocks%'[s] [(horizontal)] facing
Since:	1.4
Return Type:	Direction
The facing of an entity or block, i.e. exactly north, south, east, west, up or down (unlike direction which is the exact direction, e.g. '0.5 south and 0.7 east')
Examples:

Fall Distance 🔗Expression
Patterns:	
[the] fall[en] (distance|height) of %entities%
%entities%'[s] fall[en] (distance|height)
Since:	2.5
Return Type:	Number
The distance an entity has fallen for.
Examples:

Fertilized Blocks 🔗Expression
Patterns:	
[all] [the] fertilized blocks
Since:	2.5
Usable in events:	block fertilize
Requirements:	Minecraft 1.13 or newer
Return Type:	Block
The blocks fertilized in block fertilize events.
Examples:

Filter 🔗Expression
Patterns:	
%objects% (where|that match) \[<.+>\]
Since:	2.2-dev36
Return Type:	Object
Filters a list based on a condition. For example, if you ran 'broadcast "something" and "something else" where [string input is "something"]', only "something" would be broadcast as it is the only string that matched the condition.
Examples:

Filter Input 🔗Expression
Patterns:	
input
%*type% input
Since:	2.2-dev36
Return Type:	Object
Represents the input in a filter expression. For example, if you ran 'broadcast "something" and "something else" where [input is "something"]the condition would be checked twice, using "something" and "something else" as the inputs.
Examples:

Final Damage 🔗Expression
Patterns:	
[the] final damage
Since:	2.2-dev19
Usable in events:	damage
Return Type:	Number
How much damage is done in a damage event, considering all types of damage reduction. Can NOT be changed.
Examples:

Firework Effect 🔗Expression
Patterns:	
[(flickering|trailing|flickering trailing|trailing flickering)] %firework type% [firework [effect]] colo[u]red %colors%
[(flickering|trailing|flickering trailing|trailing flickering)] %firework type% [firework [effect]] colo[u]red %colors% fad(e|ing) [to] %colors%
Since:	2.4
Return Type:	Firework Effect
Represents a 'firework effect' which can be used in the launch firework effect.
Examples:

Flight Mode 🔗Expression
Patterns:	
[the] fl(y[ing]|ight) (mode|state) of %players%
%players%'[s] fl(y[ing]|ight) (mode|state)
Since:	2.2-dev34
Return Type:	Boolean
Whether the player(s) are allowed to fly. Use Make Fly effect to force player(s) to fly.
Examples:

Food Level 🔗Expression
Patterns:	
[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %players%]
%players%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]
Since:	1.0
Return Type:	Number
The food level of a player from 0 to 10. Has several aliases: food/hunger level/meter/bar.
Examples:

Formatted Date 🔗Expression
Patterns:	
%dates% formatted [human-readable] [(with|as) %text%]
[human-readable] formatted %dates% [(with|as) %text%]
Since:	2.2-dev31, 2.7 (support variables in format)
Return Type:	Text
Converts date to human-readable text format. By default, 'yyyy-MM-dd HH:mm:ss z' (e.g. '2018-03-30 16:03:12 +01') will be used. For reference, see this Wikipedia article.
Examples:

Former/Future State 🔗Expression
Patterns:	
[the] (former|past|old) [state] [of] %~object%
%~object% before [the event]
[the] (future|to-be|new) [state] [of] %~object%
%~object%(-to-be| after[(wards| the event)])
Since:	1.1
Return Type:	Object
Represents the value of an expression before an event happened or the value it will have directly after the event, e.g. the old or new level respectively in a level change event. Note: The past, future and present states of an expression are sometimes called 'time states' of an expression. Note 2: If you don't specify whether to use the past or future state of an expression that has different values, its default value will be used which is usually the value after the event.
Examples:

Freeze Time 🔗Expression
Patterns:	
[the] freeze time of %entities%
%entities%'[s] freeze time
Since:	2.7
Return Type:	Timespan
How much time an entity has been in powdered snow for.
Examples:

Furnace Slot 🔗Expression
Patterns:	
(fuel|result) [slot]
(ore|fuel|result)[s] [slot[s]] of %blocks%
%blocks%'[s] (ore|fuel|result)[s] [slot[s]]
Since:	1.0
Usable in events:	smelt, fuel burn
Return Type:	Inventory Slot
A slot of a furnace, i.e. either the ore, fuel or result slot. Remember to use 'block' and not 'furnace', as 'furnace' is not an existing expression.
Examples:

Game Mode 🔗Expression
Patterns:	
[the] game[ ]mode of %players%
%players%'[s] game[ ]mode
Since:	1.0
Return Type:	Game Mode
The gamemode of a player. (Gamemodes)
Examples:

Gamerule Value 🔗Expression
Patterns:	
[the] gamerule %gamerule% of %worlds%
Since:	2.5
Requirements:	Minecraft 1.13+
Return Type:	Gamerule Value
The gamerule value of a world.
Examples:

Gliding State 🔗Expression
Patterns:	
[the] (gliding|glider) [state] of %living entities%
%living entities%'[s] (gliding|glider) [state]
Since:	2.2-dev21
Return Type:	Boolean
Sets of gets gliding state of player. It allows you to set gliding state of entity even if they do not have an Elytra equipped.
Examples:

Glowing 🔗Expression
Patterns:	
[the] glowing of %entities%
%entities%'[s] glowing
Since:	2.2-dev18
Return Type:	Boolean
Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing entities can be seen through walls.
Examples:

Gravity 🔗Expression
Patterns:	
[the] gravity of %entities%
%entities%'[s] gravity
Since:	2.2-dev21
Return Type:	Boolean
If entity is affected by gravity or not, i.e. if it has Minecraft 1.10+ NoGravity flag.
Examples:

Group 🔗Expression
Patterns:	
[the] group[s] of %offline players%
%offline players%'[s] group[s]
Since:	2.2-dev35
Requirements:	Vault, a permission plugin that supports Vault
Return Type:	Text
The primary group or all groups of a player. This expression requires Vault and a compatible permissions plugin to be installed.
Examples:

Hanging Entity/Remover 🔗Expression
Patterns:	
[the] hanging (entity|remover)
Since:	2.6.2
Return Type:	Entity
Returns the hanging entity or remover in hanging break and place events.
Examples:

Hash 🔗Expression
Patterns:	
%texts% hash[ed] with (MD5|SHA-256)
Since:	2.0, 2.2-dev32 (SHA-256 algorithm)
Return Type:	Text
Hashes the given text using the MD5 or SHA-256 algorithms. Each algorithm is suitable for different use cases.
MD5 is provided mostly for backwards compatibility, as it is outdated and not secure. SHA-256 is more secure, and can used to hash somewhat confidental data like IP addresses and even passwords. It is not that secure out of the box, so please consider using salt when dealing with passwords! When hashing data, you must specify algorithms that will be used for security reasons!

Please note that a hash cannot be reversed under normal circumstanses. You will not be able to get original value from a hash with Skript.

Examples:

Hatching Entity Type 🔗Expression
Patterns:	
[the] hatching entity [type]
Since:	2.7
Usable in events:	Egg Throw
Return Type:	Entity Type
The type of the entity that will be hatched in a Player Egg Throw event.
Examples:

Hatching Number 🔗Expression
Patterns:	
[the] hatching number
Since:	2.7
Usable in events:	Egg Throw
Return Type:	byte
The number of entities that will be hatched in a Player Egg Throw event. Please note that no more than 127 entities can be hatched at once.
Examples:

Head location 🔗Expression
Patterns:	
[the] (head|eye[s]) [location[s]] of %living entities%
%living entities%'[s] (head|eye[s]) [location[s]]
Since:	2.0
Return Type:	Location
The location of an entity's head, mostly useful for players and e.g. looping blocks in the player's line of sight. Please note that this location is only accurate for entities whose head is exactly above their center, i.e. players, endermen, zombies, skeletons, etc., but not sheep, pigs or cows.
Examples:

Heal Amount 🔗Expression
Patterns:	
[the] heal amount
Since:	2.5.1
Usable in events:	heal
Return Type:	Number
The amount of health healed in a healing event.
Examples:

Heal Reason 🔗Expression
Patterns:	
(regen|health regain|heal) (reason|cause)
Since:	2.5
Return Type:	Heal Reason
The heal reason of a heal event. Please click on the link for more information.
Examples:

Health 🔗Expression
Patterns:	
[the] health of %living entities%
%living entities%'[s] health
Since:	1.0
Usable in events:	damage
Return Type:	Number
The health of a creature, e.g. a player, mob, villager, etc. The minimum value is 0, and the maximum is the creature's max health (e.g. 10 for players).
Examples:

Hidden Players 🔗Expression
Patterns:	
[(all [[of] the]|the)] hidden players (of|for) %players%
[(all [[of] the]|the)] players hidden (from|for|by) %players%
Since:	2.3
Return Type:	Player
The players hidden from a player that were hidden using the player visibility effect.
Examples:

Highest Solid Block 🔗Expression
Patterns:	
highest [(solid|non-air)] block at %locations%
Since:	2.2-dev34
Return Type:	Block
Returns the highest solid block at the x and z coordinates of the world of a given location.
Examples:

Hostname 🔗Expression
Patterns:	
[the] (host|domain)[ ][name]
Since:	2.6.1
Return Type:	Text
The hostname used by the connecting player to connect to the server in a connect event.
Examples:

Hotbar Button 🔗Expression
Patterns:	
[the] hotbar button
Since:	2.5
Return Type:	long
The hotbar button clicked in an inventory click event.
Examples:

Hotbar Slot 🔗Expression
Patterns:	
[the] [([currently] selected|current)] hotbar slot of %players%
%players%'[s] [([currently] selected|current)] hotbar slot
Since:	2.2-dev36
Return Type:	Inventory Slot
The currently selected hotbar slot. To retrieve its number use Slot Index expression.
Examples:

Hover List 🔗Expression
Patterns:	
[the] [custom] [(player|server)] (hover|sample) ([message] list|message)
[the] [custom] player [(hover|sample)] list
Since:	2.3
Usable in events:	server list ping
Requirements:	Paper 1.12.2 or newer
Return Type:	Text
The list when you hover on the player counts of the server in the server list. This can be changed using texts or players in a server list ping event only. Adding players to the list means adding the name of the players. And note that, for example if there are 5 online players (includes fake online count) in the server and the hover list is set to 3 values, Minecraft will show "... and 2 more ..." at end of the list.
Examples:

Humidity 🔗Expression
Patterns:	
[the] humidit(y|ies) of %blocks%
%blocks%'[s] humidit(y|ies)
Since:	2.2-dev35
Return Type:	Number
Humidity of given blocks.
Examples:

IP 🔗Expression
Patterns:	
IP[s][( |-)address[es]] of %players%
%players%'[s] IP[s][( |-)address[es]]
IP[( |-)address]
Since:	1.4, 2.2-dev26 (when used in connect event), 2.3 (when used in server list ping event)
Return Type:	Text
The IP address of a player, or the connected player in a connect event, or the pinger in a server list ping event.
Examples:

Index Of 🔗Expression
Patterns:	
[the] [(first|last)] index of %text% in %text%
Since:	2.1
Return Type:	long
The first or last index of a character (or text) in a text, or -1 if it doesn't occur in the text. Indices range from 1 to the length of the text.
Examples:

Indices of List 🔗Expression
Patterns:	
[(the|all [[of] the])] (indexes|indices) of %~objects%
%~objects%'[s] (indexes|indices)
[sorted] (indices|indexes) of %~objects% in (ascending|descending) order
[sorted] %~objects%'[s] (indices|indexes) in (ascending|descending) order
Since:	2.4 (indices), 2.6.1 (sorting)
Return Type:	Text
Returns all the indices of a list variable, optionally sorted by their values. To sort the indices, all objects in the list must be comparable; Otherwise, this expression will just return the unsorted indices.
Examples:

Inventory 🔗Expression
Patterns:	
[the] inventor(y|ies) of %inventoryholders%
%inventoryholders%'[s] inventor(y|ies)
Since:	1.0
Return Type:	Object
The inventory of a block or player. You can usually omit this expression and can directly add or remove items to/from blocks or players.
Examples:

Inventory Action 🔗Expression
Patterns:	
[the] inventory action
Since:	2.2-dev16
Return Type:	Inventory Action
The inventory action of an inventory event. Please click on the link for more information.
Examples:

Inventory Holder/Viewers/Rows/Slots 🔗Expression
Patterns:	
(holder[s]|viewers|[amount of] rows|[amount of] slots) of %inventories%
%inventories%'[s] (holder[s]|viewers|[amount of] rows|[amount of] slots)
Since:	2.2-dev34, 2.5 (slots)
Return Type:	Object
Gets the amount of rows/slots, viewers and holder of an inventory.
NOTE: 'Viewers' expression returns a list of players viewing the inventory. Note that a player is considered to be viewing their own inventory and internal crafting screen even when said inventory is not open.

Examples:

Inventory Slot 🔗Expression
Patterns:	
[the] slot[s] %numbers% of %inventory%
%inventory%'[s] slot[s] %numbers%
Since:	2.2-dev24
Return Type:	Inventory Slot
Represents a slot in an inventory. It can be used to change the item in an inventory too.
Examples:

Item 🔗Expression
Patterns:	
[the] item
Since:	unknown (before 2.1)
Return Type:	Item
The item involved in an event, e.g. in a drop, dispense, pickup or craft event.
Examples:

Item Amount 🔗Expression
Patterns:	
[the] item[[ ]stack] (amount|size|number) of %slots/item types/item stacks%
%slots/item types/item stacks%'[s] item[[ ]stack] (amount|size|number)
Since:	2.2-dev24
Return Type:	long
The amount of an item stack.
Examples:

Item Enchantments 🔗Expression
Patterns:	
[the] enchantments of %item types%
%item types%'[s] enchantments
Since:	2.2-dev36
Return Type:	Enchantment Type
All the enchantments an item type has.
Examples:

Item of an Entity 🔗Expression
Patterns:	
[the] item of %entities%
%entities%'[s] item
Since:	2.2-dev35, 2.2-dev36 (improved), 2.5.2 (throwable projectiles)
Requirements:	Minecraft 1.15.2+ (throwable projectiles)
Return Type:	Inventory Slot
An item associated with an entity. For dropped item entities, it gets, obviously, the item that was dropped. For item frames, the item inside the frame is returned. For throwable projectiles (snowballs, enderpearls etc.),it gets the displayed item. Other entities do not have items associated with them.
Examples:

Item with CustomModelData 🔗Expression
Patterns:	
%item type% with [custom] model data %number%
Since:	2.5
Requirements:	1.14+
Return Type:	Item Type
Get an item with a CustomModelData tag. (Value is an integer between 0 and 99999999)
Examples:

Item with Lore 🔗Expression
Patterns:	
%item type% with [(a|the)] lore %texts%
Since:	2.3
Return Type:	Item Type
Returns the given item type with the specified lore added to it. If multiple strings are passed, each of them will be a separate line in the lore.
Examples:

Items 🔗Expression
Patterns:	
[all [[of] the]|the] block[[ ]type]s
every block[[ ]type]
[all [[of] the]|the|every] block[s] of type[s] %item types%
[all [[of] the]|the|every] item[s] of type[s] %item types%
Since:	1.0 pre-5
Return Type:	Item Type
Items or blocks of a specific type, useful for looping.
Examples:

Items In 🔗Expression
Patterns:	
[(all [[of] the]|the)] items ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%
Since:	2.0
Return Type:	Inventory Slot
All items in an inventory. Useful for looping or storing in a list variable. Please note that the positions of the items in the inventory are not saved, only their order is preserved.
Examples:

Join & Split 🔗Expression
Patterns:	
(concat[enate]|join) %texts% [(with|using|by) [[the] delimiter] %text%]
split %text% (at|using|by) [[the] delimiter] %text% [with case sensitivity]
%text% split (at|using|by) [[the] delimiter] %text% [with case sensitivity]
regex split %text% (at|using|by) [[the] delimiter] %text%
regex %text% split (at|using|by) [[the] delimiter] %text%
Since:	2.1, 2.5.2 (regex support), 2.7 (case sensitivity)
Return Type:	Text
Joins several texts with a common delimiter (e.g. ", "), or splits a text into multiple texts at a given delimiter.
Examples:

Language 🔗Expression
Patterns:	
[the] [([currently] selected|current)] [game] (language|locale) [setting] of %players%
%players%'[s] [([currently] selected|current)] [game] (language|locale) [setting]
Since:	2.3
Return Type:	Text
Currently selected game language of a player. The value of the language is not defined properly. The vanilla Minecraft client will use lowercase language / country pairs separated by an underscore, but custom resource packs may use any format they wish.
Examples:

Last Attacker 🔗Expression
Patterns:	
[the] last attacker of %entity%
%entity%'[s] last attacker
Since:	2.5.1
Return Type:	Object
The last block or entity that attacked an entity.
Examples:

Last Color 🔗Expression
Patterns:	
[the] last color[s] of %texts%
%texts%'[s] last color[s]
Since:	2.6
Return Type:	Text
The colors used at the end of a string. The colors of the returned string will be formatted with their symbols.
Examples:

Last Damage 🔗Expression
Patterns:	
[the] last damage of %living entities%
%living entities%'[s] last damage
Since:	2.5.1
Return Type:	Number
The last damage that was done to an entity. Note that changing it doesn't deal more/less damage.
Examples:

Last Damage Cause 🔗Expression
Patterns:	
[the] last damage (cause|reason|type) of %living entities%
%living entities%'[s] last damage (cause|reason|type)
Since:	2.2-Fixes-V10
Return Type:	Damage Cause
Cause of last damage done to an entity
Examples:

Last Loaded Server Icon 🔗Expression
Patterns:	
[the] [last[ly]] loaded server icon
Since:	2.3
Requirements:	Paper 1.12.2 or newer
Return Type:	Server Icon
Returns the last loaded server icon with the load server icon effect.
Examples:

Last Resource Pack Response 🔗Expression
Patterns:	
[the] [last] resource pack response[s] of %players%
%players%'[s] [last] resource pack response[s]
Since:	2.4
Requirements:	Paper 1.9 or newer
Return Type:	Resource Pack State
Returns the last resource pack response received from a player.
Examples:

Last Spawned Entity 🔗Expression
Patterns:	
[the] [last[ly]] (spawned|shot) %*entity type%
[the] [last[ly]] dropped (item)
[the] [last[ly]] (created|struck) (lightning)
[the] [last[ly]] (launched|deployed) (firework)
Since:	1.3 (spawned entity), 2.0 (shot entity), 2.2-dev26 (dropped item), 2.7 (struck lightning, firework)
Return Type:	Entity
Holds the entity that was spawned most recently with the spawn effect (section), dropped with the drop effect, shot with the shoot effect or created with the lightning effect. Please note that even though you can spawn multiple mobs simultaneously (e.g. with 'spawn 5 creepers'), only the last spawned mob is saved and can be used. If you spawn an entity, shoot a projectile and drop an item you can however access all them together.
Examples:

Last/First Login Time 🔗Expression
Patterns:	
[the] (last|first) login of %offline players%
%offline players%'[s] (last|first) login
Since:	2.5
Return Type:	Date
When a player last/first logged in the server. 'last login' requires paper to get the last login, otherwise it will get the last time they were seen on the server.
Examples:

Leash Holder 🔗Expression
Patterns:	
[the] leash holder[s] of %living entities%
%living entities%'[s] leash holder[s]
Since:	2.3
Return Type:	Entity
The leash holder of a living entity.
Examples:

Length 🔗Expression
Patterns:	
[the] length of %texts%
%texts%'[s] length
Since:	2.1
Return Type:	long
The length of a text, in number of characters.
Examples:

Level 🔗Expression
Patterns:	
[the] level of %players%
%players%'[s] level
Since:	unknown (before 2.1)
Usable in events:	level change
Return Type:	long
The level of a player.
Examples:

Level Progress 🔗Expression
Patterns:	
[the] level progress of %players%
%players%'[s] level progress
Since:	2.0
Usable in events:	level change
Return Type:	Number
The player's progress in reaching the next level, this represents the experience bar in the game. Please note that this value is between 0 and 1 (e.g. 0.5 = half experience bar). Changing this value can cause the player's level to change if the resulting level progess is negative or larger than 1, e.g. increase the player's level progress by 0.5 will make the player gain a level if their progress was more than 50%.
Examples:

Light Level 🔗Expression
Patterns:	
[(sky|sun|block)[ ]]light[ ]level [(of|%direction%) %location%]
Since:	1.3.4
Return Type:	byte
Gets the light level at a certain location which ranges from 0 to 15. It can be separated into sunlight (15 = direct sunlight, 1-14 = indirect) and block light (torches, glowstone, etc.). The total light level of a block is the maximum of the two different light types.
Examples:

Loaded Plugins 🔗Expression
Patterns:	
[(all [[of] the]|the)] [loaded] plugins
Since:	2.7
Return Type:	Text
An expression to obtain a list of the names of the server's loaded plugins.
Examples:

Location 🔗Expression
Patterns:	
[the] [event-](location|position)
Since:	2.0
Return Type:	Location
The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
Examples:

Location 🔗Expression
Patterns:	
[the] (location|position) %directions% [%location%]
Since:	2.0
Return Type:	Location
The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
Examples:

Location 🔗Expression
Patterns:	
(location|position) of %location%
%location%'[s] (location|position)
Since:	Unknown
Return Type:	Location
The location of a block or entity. This not only represents the x, y and z coordinates of the location but also includes the world and the direction an entity is looking (e.g. teleporting to a saved location will make the teleported entity face the same saved direction every time). Please note that the location of an entity is at it's feet, use head location to get the location of the head.
Examples:

Location At 🔗Expression
Patterns:	
[the] (location|position) [at] [\(][x[ ][=[ ]]]%number%, [y[ ][=[ ]]]%number%, [and] [z[ ][=[ ]]]%number%[\)] [[(in|of) [[the] world]] %world%]
Since:	2.0
Return Type:	Location
Allows to create a location from three coordinates and a world.
Examples:

Loop value 🔗Expression
Patterns:	
[the] loop-<.+>
Since:	1.0
Return Type:	Object
The currently looped value.
Examples:

Loot 🔗Expression
Patterns:	
[the] loot
Since:	2.7
Requirements:	MC 1.16+
Return Type:	Item
The loot that will be generated in a 'loot generate' event.
Examples:

Lore 🔗Expression
Patterns:	
[the] lore of %item stack/item type%
%item stack/item type%'[s] lore
[the] line %number% of [the] lore of %item stack/item type%
[the] line %number% of %item stack/item type%'[s] lore
[the] %number%(st|nd|rd|th) line of [the] lore of %item stack/item type%
[the] %number%(st|nd|rd|th) line of %item stack/item type%'[s] lore
Since:	2.1
Return Type:	Text
An item's lore.
Examples:

MOTD 🔗Expression
Patterns:	
[the] [(default)|(shown|displayed)] (MOTD|message of [the] day)
Since:	2.3
Return Type:	Text
The message of the day in the server list. This can be changed in a server list ping event only. 'default MOTD' returns the default MOTD always and can't be changed.
Examples:

Max Durability 🔗Expression
Patterns:	
[the] max[imum] durabilit(y|ies) of %item stacks/slots%
%item stacks/slots%'[s] max[imum] durabilit(y|ies)
Since:	2.5
Return Type:	long
The maximum durability of an item.
Examples:

Max Health 🔗Expression
Patterns:	
[the] max[imum] health of %living entities%
%living entities%'[s] max[imum] health
Since:	2.0
Usable in events:	damage, death
Return Type:	Number
The maximum health of an entity, e.g. 10 for a player.
Examples:

Max Minecart Speed 🔗Expression
Patterns:	
[the] max[imum] minecart (speed|velocity) of %entities%
%entities%'[s] max[imum] minecart (speed|velocity)
Since:	2.5.1
Return Type:	Number
The maximum speed of a minecart.
Examples:

Max Players 🔗Expression
Patterns:	
[the] [(real|default)|(fake|shown|displayed)] max[imum] player[s] [count|amount|number|size]
[the] [(real|default)|(fake|shown|displayed)] max[imum] (count|amount|number|size) of players
Since:	2.3, 2.7 (modify max real players)
Requirements:	Paper 1.16+ (modify max real players)
Return Type:	integer
The count of max players. This can be changed in a server list ping event only. 'real max players' returns the real count of max players of the server and can be modified on Paper 1.16 or later.
Examples:

Maximum Freeze Time 🔗Expression
Patterns:	
[the] max[imum] freeze time of %entities%
%entities%'[s] max[imum] freeze time
Since:	2.7
Return Type:	Timespan
The maximum amount of time an entity can spend in powdered snow before taking damage.
Examples:

Maximum Stack Size 🔗Expression
Patterns:	
[the] max[imum] stack[[ ]size] of %item type%
%item type%'[s] max[imum] stack[[ ]size]
Since:	2.1
Return Type:	long
The maximum stack size of the specified material, e.g. 64 for torches, 16 for buckets, and 1 for swords.
Examples:

Me 🔗Expression
Patterns:	
me
my[self]
Since:	2.1.1
Return Type:	Player
A 'me' expression that can be used in players' effect commands only.
Examples:

Mending Repair Amount 🔗Expression
Patterns:	
[the] [mending] repair amount
Since:	2.5.1
Return Type:	long
The number of durability points an item is to be repaired in a mending event. Modifying the repair amount will affect how much experience is given to the player after mending.
Examples:

Message 🔗Expression
Patterns:	
[the] [chat( |-)]message
[the] (join|log[ ]in)( |-)message
[the] (quit|leave|log[ ]out|kick)( |-)message
[the] death( |-)message
Since:	1.4.6 (chat message), 1.4.9 (join & quit messages), 2.0 (death message)
Usable in events:	chat, join, quit, death
Return Type:	Text
The (chat) message of a chat event, the join message of a join event, the quit message of a quit event, or the death message on a death event. This expression is mostly useful for being changed.
Examples:

Metadata 🔗Expression
Patterns:	
metadata [(value|tag)[s]] %texts% of %metadata holders%
%metadata holders%'[s] metadata [(value|tag)[s]] %text%
Since:	2.2-dev36
Return Type:	Object
Metadata is a way to store temporary data on entities, blocks and more that disappears after a server restart.
Examples:

Middle of Location 🔗Expression
Patterns:	
[the] (middle|center) [point] of %location%
%location%'[s] (middle|center) [point]
Since:	2.6.1
Return Type:	Location
Returns the middle/center of a location. In other words, returns the middle of the X, Z coordinates and the floor value of the Y coordinate of a location.
Examples:

Minecart Derailed / Flying Velocity 🔗Expression
Patterns:	
[the] [minecart] (derailed|flying) velocity of %entities%
%entities%'[s] [minecart] (derailed|flying) velocity
Since:	2.5.1
Return Type:	Vector
The velocity of a minecart as soon as it has been derailed or as soon as it starts flying.
Examples:

Money 🔗Expression
Patterns:	
[the] (money|balance|[bank] account) of %offline players%
%offline players%'[s] (money|balance|[bank] account)
Since:	2.0, 2.5 (offline players)
Requirements:	Vault, an economy plugin that supports Vault
Return Type:	Money
How much virtual money a player has (can be changed).
Examples:

Moon Phase 🔗Expression
Patterns:	
[the] (lunar|moon) phase[s] of %worlds%
%worlds%'[s] (lunar|moon) phase[s]
Since:	2.7
Requirements:	Paper 1.16+
Return Type:	Moon Phase
The current moon phase of a world.
Examples:

Moved blocks 🔗Expression
Patterns:	
[the] moved blocks
Since:	2.2-dev27
Return Type:	Block
Blocks which are moved in a piston event. Cannot be used outside of piston events.
Examples:

Name / Display Name / Tab List Name 🔗Expression
Patterns:	
[the] (name[s]|(display|nick|chat|custom)[ ]name[s]) of %offline players/entities/blocks/item types/inventories/slots/worlds/gamerules%
%offline players/entities/blocks/item types/inventories/slots/worlds/gamerules%'[s] (name[s]|(display|nick|chat|custom)[ ]name[s])
Since:	before 2.1, 2.2-dev20 (inventory name), 2.4 (non-living entity support, changeable inventory name), 2.7 (worlds)
Return Type:	Text
Represents the Minecraft account, display or tab list name of a player, or the custom name of an item, entity, block, inventory, gamerule or world.
    
Players         
            
Name: The Minecraft account name of the player. Can't be changed, but 'display name' can be changed.
            
Display Name: The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).
        
    
    
Entities         
            
Name: The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non-living entities, the name will not be visible at all. To prevent this, use 'display name'.
            
Display Name: The custom name of the entity. Can be changed, which will also enable custom name visibility of the entity so name tag of the entity will be visible always.
        
    
    
Items         
            
Name and Display Name: The custom name of the item (not the Minecraft locale name). Can be changed.
        
    
    
Inventories         
            
Name and Display Name: The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.
        
    
    
Gamerules (1.13+)         
            
Name: The name of the gamerule. Cannot be changed.
        
    
    
Worlds         
            
Name: The name of the world. Cannot be changed.
        
    
Examples:

Name / Display Name / Tab List Name 🔗Expression
Patterns:	
[the] ((player|tab)[ ]list name[s]) of %players%
%players%'[s] ((player|tab)[ ]list name[s])
Since:	before 2.1, 2.2-dev20 (inventory name), 2.4 (non-living entity support, changeable inventory name), 2.7 (worlds)
Return Type:	Text
Represents the Minecraft account, display or tab list name of a player, or the custom name of an item, entity, block, inventory, gamerule or world.
    
Players         
            
Name: The Minecraft account name of the player. Can't be changed, but 'display name' can be changed.
            
Display Name: The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).
        
    
    
Entities         
            
Name: The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non-living entities, the name will not be visible at all. To prevent this, use 'display name'.
            
Display Name: The custom name of the entity. Can be changed, which will also enable custom name visibility of the entity so name tag of the entity will be visible always.
        
    
    
Items         
            
Name and Display Name: The custom name of the item (not the Minecraft locale name). Can be changed.
        
    
    
Inventories         
            
Name and Display Name: The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.
        
    
    
Gamerules (1.13+)         
            
Name: The name of the gamerule. Cannot be changed.
        
    
    
Worlds         
            
Name: The name of the world. Cannot be changed.
        
    
Examples:

Named Item/Inventory 🔗Expression
Patterns:	
%item type/inventory type% (named|with name[s]) %text%
Since:	2.0, 2.2-dev34 (inventories)
Return Type:	Object
Directly names an item/inventory, useful for defining a named item/inventory in a script. If you want to (re)name existing items/inventories you can either use this expression or use set name of <item/inventory> to <text>.
Examples:

Nearest Entity 🔗Expression
Patterns:	
[the] nearest %*entity types% [[relative] to %entity/location%]
[the] %*entity types% nearest [to %entity/location%]
Since:	2.7
Return Type:	Entity
Gets the entity nearest to a location or another entity.
Examples:

New Line 🔗Expression
Patterns:	
n[ew]l[ine]
line[ ]break
Since:	2.5
Return Type:	Text
Returns a line break separator.
Examples:

No Damage Ticks 🔗Expression
Patterns:	
[the] (invulnerability|no damage) tick[s] of %living entities%
%living entities%'[s] (invulnerability|no damage) tick[s]
Since:	2.5
Return Type:	long
The number of ticks that an entity is invulnerable to damage for.
Examples:

Now 🔗Expression
Patterns:	
now
Since:	1.4
Return Type:	Date
The current system time of the server. Use time to get the Minecraft time of a world.
Examples:

Number of Characters 🔗Expression
Patterns:	
number of upper[ ]case char(acters|s) in %text%
number of lower[ ]case char(acters|s) in %text%
number of digit char(acters|s) in %text%
Since:	2.5
Return Type:	long
The number of uppercase, lowercase, or digit characters in a string.
Examples:

Numbers 🔗Expression
Patterns:	
[(all [[of] the]|the)] (numbers|integers|decimals) (between|from) %number% (and|to) %number%
Since:	1.4.6 (integers & numbers), 2.5.1 (decimals)
Return Type:	Number
All numbers between two given numbers, useful for looping. Use 'numbers' if your start is not an integer and you want to keep the fractional part of the start number constant, or use 'integers' if you only want to loop integers. You may also use 'decimals' if you want to use the decimal precision of the start number. You may want to use the 'times' expression instead, for instance 'loop 5 times:'
Examples:

Offline players 🔗Expression
Patterns:	
[(all [[of] the]|the)] offline[ ]players
Since:	2.2-dev35
Return Type:	Offline Player
All players that have ever joined the server. This includes the players currently online.
Examples:

Online Player Count 🔗Expression
Patterns:	
[the] [((real|default)|(fake|shown|displayed))] [online] player (count|amount|number)
[the] [((real|default)|(fake|shown|displayed))] (count|amount|number|size) of online players
Since:	2.3
Return Type:	long
The amount of online players. This can be changed in a server list ping event only to show fake online player amount. 'real online player count' always returns the real count of online players and can't be changed.
Fake online player count requires PaperSpigot 1.12.2+.

Examples:

Opened Inventory 🔗Expression
Patterns:	
[the] (current|open|top) inventory [of %players%]
%players%'[s] (current|open|top) inventory
Since:	2.2-dev24, 2.2-dev35 (Just 'current inventory' works in player events)
Return Type:	Inventory
Return the currently opened inventory of a player. If no inventory is open, it returns the own player's crafting inventory.
Examples:

Parse 🔗Expression
Patterns:	
%text% parsed as (%*type%|"<.*>")
Since:	2.0
Return Type:	Object
Parses text as a given type, or as a given pattern. This expression can be used in two different ways: One which parses the entire text as a single instance of a type, e.g. as a number, and one that parses the text according to a pattern. If the given text could not be parsed, this expression will return nothing and the parse error will be set if some information is available. Some notes about parsing with a pattern: - The pattern must be a Skript pattern, e.g. percent signs are used to define where to parse which types, e.g. put a %number% or %items% in the pattern if you expect a number or some items there. - You have to save the expression's value in a list variable, e.g. set {parsed::*} to message parsed as "...". - The list variable will contain the parsed values from all %types% in the pattern in order. If a type was plural, e.g. %items%, the variable's value at the respective index will be a list variable, e.g. the values will be stored in {parsed::1::*}, not {parsed::1}.
Examples:

Parse Error 🔗Expression
Patterns:	
[the] [last] [parse] error
Since:	2.0
Return Type:	Text
The error which caused the last parse operation to fail, which might not be set if a pattern was used and the pattern didn't match the provided text at all.
Examples:

Passenger 🔗Expression
Patterns:	
[the] passenger[s] of %entities%
%entities%'[s] passenger[s]
Since:	2.0, 2.2-dev26 (Multiple passengers for 1.11.2+)
Return Type:	Entity
The passenger of a vehicle, or the rider of a mob. For 1.11.2 and above, it returns a list of passengers and you can use all changers in it. See also: vehicle
Examples:

Pi 🔗Expression
Patterns:	
(pi|π)
Since:	2.7
Return Type:	double
Returns the mathematical constant pi. (approx. 3.1415926535)
Examples:

Pickup Delay 🔗Expression
Patterns:	
[the] pick[ ]up delay of %entities%
%entities%'[s] pick[ ]up delay
Since:	2.7
Return Type:	Timespan
The amount of time before a dropped item can be picked up by an entity.
Examples:

Ping 🔗Expression
Patterns:	
[the] ping of %players%
%players%'[s] ping
Since:	2.2-dev36
Return Type:	long
Pings of players, as Minecraft server knows them. Note that they will almost certainly be different from the ones you'd get from using ICMP echo requests. This expression is only supported on some server software (PaperSpigot).
Examples:

Plain Item 🔗Expression
Patterns:	
[a[n]] (plain|unmodified) %item type%
Since:	2.6
Return Type:	Item Type
A plain item is an item with no modifications. It can be used to convert items to their default state or to match with other default items.
Examples:

Player List Header and Footer 🔗Expression
Patterns:	
[the] (player|tab)[ ]list (header|footer) [(text|message)] of %players%
%players%'[s] (player|tab)[ ]list (header|footer) [(text|message)]
Since:	2.4
Requirements:	Minecraft 1.13 or newer
Return Type:	Text
The message above and below the player list in the tab menu.
Examples:

Player Protocol Version 🔗Expression
Patterns:	
[the] protocol version of %players%
%players%'[s] protocol version
Since:	2.6.2
Requirements:	Paper 1.12.2 or newer
Return Type:	integer
Player's protocol version. For more information and list of protocol versions visit wiki.vg.
Examples:

Player Skull 🔗Expression
Patterns:	
[the] (head|skull) of %offline players%
%offline players%'[s] (head|skull)
Since:	2.0
Return Type:	Item Type
Gets a skull item representing a player. Skulls for other entities are provided by the aliases.
Examples:

Player Weather 🔗Expression
Patterns:	
[the] [(client|custom)] weather of %players%
%players%'[s] [(client|custom)] weather
Since:	2.2-dev34
Return Type:	Weather Type
The weather for a player.
Examples:

Portal 🔗Expression
Patterns:	
[the] portal['s] blocks
[the] blocks of [the] portal
Since:	2.4
Usable in events:	portal_create
Return Type:	Block
The blocks associated with a portal in the portal creation event.
Examples:

Potion Effect 🔗Expression
Patterns:	
[new] potion effect of %potion% [potion] [[[of] tier] %number%] [without particles] [for %time span%]
[new] ambient potion effect of %potion% [potion] [[[of] tier] %number%] [without particles] [for %time span%]
Since:	2.5.2
Return Type:	Potion Effect
Create a new potion effect to apply to an entity or item type. Do note that when applying potion effects to tipped arrows/lingering potions, Minecraft reduces the timespan.
Examples:

Potion Effect Tier 🔗Expression
Patterns:	
[the] [potion] (tier|amplifier|level) of %potions% (of|for|on) %living entities%
Since:	2.7
Return Type:	integer
An expression to obtain the amplifier of a potion effect applied to an entity.
Examples:

Potion Effects 🔗Expression
Patterns:	
[the] [(all [[of] the]|the)] [active] potion effects of %living entities/item types%
%living entities/item types%'[s] [(all [[of] the]|the)] [active] potion effects
Since:	2.5.2
Return Type:	Potion Effect
Represents the active potion effects of entities and itemtypes. You can clear all potion effects of an entity/itemtype and add/remove a potion effect/type to/from an entity/itemtype. Do note you will not be able to clear the base potion effects of a potion item. In that case, just set the item to a water bottle. When adding a potion effect type (rather than a potion effect), it will default to 15 seconds with tier 1.
Examples:

Prefix/Suffix 🔗Expression
Patterns:	
[the] [chat] (prefix|suffix) of %players%
%players%'[s] [chat] (prefix|suffix)
Since:	2.0
Requirements:	Vault, a chat plugin that supports Vault
Return Type:	Text
The prefix or suffix as defined in the server's chat plugin.
Examples:

Projectile Bounce State 🔗Expression
Patterns:	
[the] projectile bounce (state|ability|mode) of %projectiles%
%projectiles%'[s] projectile bounce (state|ability|mode)
Since:	2.5.1
Return Type:	Boolean
A projectile's bounce state.
Examples:

Projectile Critical State 🔗Expression
Patterns:	
[the] (projectile|arrow) critical (state|ability|mode) of %projectiles%
%projectiles%'[s] (projectile|arrow) critical (state|ability|mode)
Since:	2.5.1
Return Type:	Boolean
A projectile's critical state. The only currently accepted projectiles are arrows and tridents.
Examples:

Protocol Version 🔗Expression
Patterns:	
[the] [server] [(sent|required|fake)] protocol version [number]
Since:	2.3
Usable in events:	server list ping
Requirements:	Paper 1.12.2 or newer
Return Type:	long
The protocol version that will be sent as the protocol version of the server in a server list ping event. For more information and list of protocol versions visit wiki.vg. If this protocol version doesn't match with the protocol version of the client, the client will see the version string. But please note that, this expression has no visual effect over the version string. For example if the server uses PaperSpigot 1.12.2, and you make the protocol version 107 (1.9), the version string will not be "Paper 1.9", it will still be "Paper 1.12.2". But then you can customize the version string as you wish. Also if the protocol version of the player is higher than protocol version of the server, it will say "Server out of date!", and if vice-versa "Client out of date!" when you hover on the ping bars.
This can be set in a server list ping event only (increase and decrease effects cannot be used because that wouldn't make sense).

Examples:

Random 🔗Expression
Patterns:	
[a] random %*type% [out] of %objects%
Since:	1.4.9
Return Type:	Object
Gets a random item out of a set, e.g. a random player out of all players online.
Examples:

Random Number 🔗Expression
Patterns:	
[a] random (integer|number) (from|between) %number% (to|and) %number%
Since:	1.4
Return Type:	Number
A random number or integer between two given numbers. Use 'number' if you want any number with decimal parts, or use use 'integer' if you only want whole numbers. Please note that the order of the numbers doesn't matter, i.e. random number between 2 and 1 will work as well as random number between 1 and 2.
Examples:

Random UUID 🔗Expression
Patterns:	
[a] random uuid
Since:	2.5.1
Return Type:	Text
Returns a random UUID.
Examples:

Raw Name 🔗Expression
Patterns:	
(raw|minecraft|vanilla) name[s] of %item types%
Since:	unknown (2.2)
Return Type:	Text
The raw Minecraft material name of the given item. Note that this is not guaranteed to give same results on all servers.
Examples:

Raw String 🔗Expression
Patterns:	
raw %texts%
Since:	2.7
Return Type:	Text
Returns the string without formatting (colors etc.) and without stripping them from it, e.g. raw "&aHello There!" would output &aHello There!
Examples:

Redstone Block Power 🔗Expression
Patterns:	
[the] redstone power of %blocks%
%blocks%'[s] redstone power
Since:	2.5
Return Type:	long
Power of a redstone block
Examples:

Region 🔗Expression
Patterns:	
[the] [event-]region
Since:	2.1
Requirements:	Supported regions plugin
Return Type:	Region
The region involved in an event. This expression requires a supported regions plugin to be installed.
Examples:

Region Members & Owners 🔗Expression
Patterns:	
[(all|the)] (members|owner[s]) of [[the] region[s]] %regions%
[[the] region[s]] %regions%'[s] (members|owner[s])
Since:	2.1
Requirements:	Supported regions plugin
Return Type:	Offline Player
A list of members or owners of a region. This expression requires a supported regions plugin to be installed.
Examples:

Regions At 🔗Expression
Patterns:	
[the] region[(s)] %direction% %locations%
Since:	2.1
Requirements:	Supported regions plugin
Return Type:	Region
All regions at a particular location. This expression requires a supported regions plugin to be installed.
Examples:

Remaining Air 🔗Expression
Patterns:	
[the] remaining air of %living entities%
%living entities%'[s] remaining air
Since:	unknown (before 2.1)
Return Type:	Timespan
How much time a player has left underwater before starting to drown.
Examples:

Respawn Anchor Charges 🔗Expression
Patterns:	
[the] [max[imum]] charge[s] of %blocks%
%blocks%'[s] [max[imum]] charge[s]
Since:	2.7
Requirements:	Minecraft 1.16+
Return Type:	integer
The charges of a respawn anchor.
Examples:

Respawn location 🔗Expression
Patterns:	
[the] respawn location
Since:	2.2-dev35
Return Type:	Location
The location that a player should respawn at. This is used within the respawn event.
Examples:

Reversed List 🔗Expression
Patterns:	
reversed %objects%
Since:	2.4
Return Type:	Object
Reverses given list.
Examples:

Rounding 🔗Expression
Patterns:	
[(a|the)] round[ed] down %number%
[(a|the)] round[ed] %number%
[(a|the)] round[ed] up %number%
Since:	2.0
Return Type:	long
Rounds numbers normally, up (ceiling) or down (floor) respectively.
Examples:

Saturation 🔗Expression
Patterns:	
[the] saturation of %players%
%players%'[s] saturation
Since:	2.2-Fixes-v10, 2.2-dev35 (fully modifiable), 2.6.2 (syntax pattern changed)
Return Type:	Number
The saturation of a player. If used in a player event, it can be omitted and will default to event-player.
Examples:

Scoreboard Tags 🔗Expression
Patterns:	
[(all [[of] the]|the)] scoreboard tags of %entities%
%entities%'[s] scoreboard tags
Since:	2.3
Return Type:	Text
Scoreboard tags are simple list of texts stored directly in the data of an entity. So this is a Minecraft related thing, not Bukkit, so the tags will not get removed when the server stops. You can visit visit Minecraft Wiki for more info. This is changeable and valid for any type of entity. Also you can use use the Has Scoreboard Tag condition to check whether an entity has the given tags.
Requires Minecraft 1.11+ (actually added in 1.9 to the game, but added in 1.11 to Spigot).

Examples:

Script Name 🔗Expression
Patterns:	
[the] script[['s] name]
name of [the] script
Since:	2.0
Usable in events:	Script Load/Unload
Return Type:	Text
Holds the current script's name (the file name without '.sk').
Examples:

Sea Level 🔗Expression
Patterns:	
[the] sea level of %worlds%
%worlds%'[s] sea level
Since:	2.5.1
Return Type:	long
Gets the sea level of a world.
Examples:

Sea Pickles 🔗Expression
Patterns:	
[the] [(min|max)[imum]] [sea] pickle(s| (count|amount)) of %blocks%
%blocks%'[s] [(min|max)[imum]] [sea] pickle(s| (count|amount))
Since:	2.7
Return Type:	integer
An expression to obtain or modify data relating to the pickles of a sea pickle block.
Examples:

Server Icon 🔗Expression
Patterns:	
[the] [((default)|(shown|sent))] [server] icon
Since:	2.3
Requirements:	Paper 1.12.2 or newer
Return Type:	Server Icon
Icon of the server in the server list. Can be set to an icon that loaded using the load server icon effect, or can be reset to the default icon in a server list ping. 'default server icon' returns the default server icon (server-icon.png) always and cannot be changed.
Examples:

Sets 🔗Expression
Patterns:	
[all [[of] the]|the|every] %*type%
Since:	unknown (before 1.4.2), 2.7 (colors)
Return Type:	Object
Returns a list of all the values of a type; useful for looping.
Examples:

Shooter 🔗Expression
Patterns:	
[the] shooter [of %projectile%]
Since:	1.3.7
Return Type:	Living Entity
The shooter of a projectile.
Examples:

Shuffled List 🔗Expression
Patterns:	
shuffled %objects%
Since:	2.2-dev32
Return Type:	Object
Shuffles given list randomly. This is done by replacing indices by random numbers in resulting list.
Examples:

Sign Text 🔗Expression
Patterns:	
[the] line %number% [of %block%]
[the] (1st|first|2nd|second|3rd|third|4th|fourth) line [of %block%]
Since:	1.3
Return Type:	Text
A line of text on a sign. Can be changed, but remember that there is a 16 character limit per line (including color codes that use 2 characters each).
Examples:

Slot Index 🔗Expression
Patterns:	
[the] index of %slots%
%slots%'[s] index
Since:	2.2-dev35
Return Type:	long
Index of an an inventory slot. Other types of slots may or may not have indices. Note that comparing slots with numbers is also possible; if index of slot is same as the number, comparisonsucceeds. This expression is mainly for the cases where you must for some reason save the slot numbers.
Examples:

Sorted List 🔗Expression
Patterns:	
sorted %objects%
Since:	2.2-dev19
Return Type:	Object
Sorts given list in natural order. All objects in list must be comparable; if they're not, this expression will return nothing.
Examples:

Source Block 🔗Expression
Patterns:	
[the] source block
Since:	2.7
Usable in events:	Spread
Return Type:	Block
The source block in a spread event.
Examples:

Spawn 🔗Expression
Patterns:	
[the] spawn[s] [(point|location)[s]] [of %worlds%]
%worlds%'[s] spawn[s] [(point|location)[s]]
Since:	1.4.2
Return Type:	Location
The spawn point of a world.
Examples:

Spawn Reason 🔗Expression
Patterns:	
[the] spawn[ing] reason
Since:	2.3
Return Type:	Spawn Reason
The spawn reason in a spawn event.
Examples:

Spawner Type 🔗Expression
Patterns:	
[the] (spawner|entity|creature) type[s] of %blocks%
%blocks%'[s] (spawner|entity|creature) type[s]
Since:	2.4
Return Type:	Entity Type
Retrieves, sets, or resets the spawner's entity type
Examples:

Special Number 🔗Expression
Patterns:	
(NaN|[(-|minus)](infinity|∞)) value
value of (NaN|[(-|minus)](infinity|∞))
Since:	2.2-dev32d
Return Type:	Number
Special number values, namely NaN, Infinity and -Infinity
Examples:

Spectator Target 🔗Expression
Patterns:	
spectator target [of %players%]
%players%'[s] spectator target
Since:	2.4-alpha4, 2.7 (Paper Spectator Event)
Requirements:	Paper
Return Type:	Entity
Grabs the spectator target entity of the players.
Examples:

Speed 🔗Expression
Patterns:	
[the] (walk[ing]|fl(y[ing]|ight))[( |-)]speed of %players%
%players%'[s] (walk[ing]|fl(y[ing]|ight))[( |-)]speed
Since:	unknown (before 2.1)
Return Type:	Number
A player's walking or flying speed. Both can be changed, but values must be between -1 and 1 (excessive values will be changed to -1 or 1 respectively). Negative values reverse directions. Please note that changing a player's speed will change their FOV just like potions do.
Examples:

Substring 🔗Expression
Patterns:	
[the] (part|sub[ ](text|string)) of %texts% (between|from) [ind(ex|ices)|character[s]] %number% (and|to) [(index|character)] %number%
[the] (first|last) [%number%] character[s] of %texts%
[the] %number% (first|last) characters of %texts%
[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %texts%
Since:	2.1, 2.5.2 (character at, multiple strings support)
Return Type:	Text
Extracts part of a text. You can either get the first <x> characters, the last <x> characters, the character at index <x>, or the characters between indices <x> and <y>. The indices <x> and <y> should be between 1 and the length of the text (other values will be fit into this range).
Examples:

TPS (ticks per second) 🔗Expression
Patterns:	
tps from [the] last ([1] minute|1[ ]m[inute])
tps from [the] last 5[ ]m[inutes]
tps from [the] last 15[ ]m[inutes]
[the] tps
Since:	2.2-dev36
Return Type:	Number
Returns the 3 most recent TPS readings, like the /tps command. This expression is only supported on some server software (PaperSpigot).
Examples:

Tamer 🔗Expression
Patterns:	
[the] tamer
Since:	2.2-dev25
Return Type:	Player
The tamer of an entity. Can only be used in entity tame events. You can use 'event-entity' to refer tamed entity itself.
Examples:

Target 🔗Expression
Patterns:	
[the] target[[ed] %*entity type%] [of %living entities%]
%living entities%'[s] target[[ed] %*entity type%]
Since:	1.4.2, 2.7 (Reset)
Return Type:	Entity
For players this is the entity at the crosshair. For mobs and experience orbs this is the entity they are attacking/following (if any).
Examples:

Targeted Block 🔗Expression
Patterns:	
[the] target[ed] block[s] [of %players%]
%players%'[s] target[ed] block[s]
[the] actual[ly] target[ed] block[s] [of %players%]
%players%'[s] actual[ly] target[ed] block[s]
Since:	1.0
Return Type:	Block
The block at the crosshair. This regards all blocks that are not air as fully solid, e.g. torches will be like a solid stone block for this expression.
Examples:

Teleport Cause 🔗Expression
Patterns:	
[the] teleport (cause|reason|type)
Since:	2.2-dev35
Return Type:	Teleport Cause
The teleport cause within a player teleport event.
Examples:

Temperature 🔗Expression
Patterns:	
[the] temperature[s] of %blocks%
%blocks%'[s] temperature[s]
Since:	2.2-dev35
Return Type:	Number
Temperature at given block.
Examples:

Ternary 🔗Expression
Patterns:	
%objects% if <.+>[,] (otherwise|else) %objects%
Since:	2.2-dev36
Return Type:	Object
A shorthand expression for returning something based on a condition.
Examples:

The Egg 🔗Expression
Patterns:	
[the] [thrown] egg
Since:	2.7
Usable in events:	Egg Throw
Return Type:	Projectile
The egg thrown in a Player Egg Throw event.
Examples:

Time 🔗Expression
Patterns:	
[the] time[s] [([with]in|of) %worlds%]
%worlds%'[s] time[s]
Since:	1.0
Return Type:	Time
The time of a world.
Examples:

Time Played 🔗Expression
Patterns:	
[the] time played of %offline players%
%offline players%'[s] time played
Since:	2.5, 2.7 (offline players)
Requirements:	MC 1.15+ (offline players)
Return Type:	Timespan
The amount of time a player has played for on the server. This info is stored in the player's statistics in the main world's data folder. Changing this will also change the player's stats which can be views in the client's statistics menu. Using this expression on offline players on Minecraft 1.14 and below will return nothing <none>.
Examples:

Time Since 🔗Expression
Patterns:	
[the] time since %dates%
Since:	2.5
Return Type:	Timespan
The time that has passed since a date. If the given date is in the future, a value will not be returned.
Examples:

Tool 🔗Expression
Patterns:	
[the] ((tool|held item|weapon)|(off[ ]hand (tool|item))) [of %living entities%]
%living entities%'[s] ((tool|held item|weapon)|(off[ ]hand (tool|item)))
Since:	1.0
Return Type:	Inventory Slot
The item an entity is holding in their main or off hand.
Examples:

Total Experience 🔗Expression
Patterns:	
[the] [total] experience of %entities%
%entities%'[s] [total] experience
Since:	2.7
Return Type:	integer
The total experience, in points, of players or experience orbs. Adding to a player's experience will trigger Mending, but setting their experience will not.
Examples:

Type of 🔗Expression
Patterns:	
[the] type of %entity types/item types/inventories/potion effects/block datas%
%entity types/item types/inventories/potion effects/block datas%'[s] type
Since:	1.4, 2.5.2 (potion effect), 2.7 (block datas)
Return Type:	Object
Type of a block, item, entity, inventory or potion effect. Types of items, blocks and block datas are item types similar to them but have amounts of one, no display names and, on Minecraft 1.13 and newer versions, are undamaged. Types of entities and inventories are entity types and inventory types known to Skript. Types of potion effects are potion effect types.
Examples:

UUID 🔗Expression
Patterns:	
[the] UUID of %offline players/worlds/entities%
%offline players/worlds/entities%'[s] UUID
Since:	2.1.2, 2.2 (offline players' UUIDs), 2.2-dev24 (other entities' UUIDs)
Return Type:	Text
The UUID of a player, entity or world. In the future there will be an option to use a player's UUID instead of the name in variable names (i.e. when %player% is used), but for now this can be used. Please note that this expression does not work for offline players if you are under 1.8!
Examples:

Unbreakable Items 🔗Expression
Patterns:	
unbreakable %item types%
Since:	2.2-dev13b
Return Type:	Item Type
Creates unbreakable copies of given items.
Examples:

Unix Date 🔗Expression
Patterns:	
[the] unix date of %numbers%
%numbers%'[s] unix date
Since:	2.5
Return Type:	Date
Converts given Unix timestamp to a date. The Unix timespan represents the number of seconds elapsed since 1 January 1970.
Examples:

Unix Timestamp 🔗Expression
Patterns:	
[the] unix timestamp of %dates%
%dates%'[s] unix timestamp
Since:	2.2-dev31
Return Type:	Number
Converts given date to Unix timestamp. This is roughly how many seconds have elapsed since 1 January 1970.
Examples:

Value Within 🔗Expression
Patterns:	
[the] (%*type%|value[s]) (within|in) %~objects%
Since:	2.7
Return Type:	Object
Gets the value within objects. Usually used with variables to get the value they store rather than the variable itself, or with lists to get the values of a type.
Examples:

Vectors - Angle Between 🔗Expression
Patterns:	
[the] angle between [[the] vectors] %vector% and %vector%
Since:	2.2-dev28
Return Type:	Number
Gets the angle between two vectors.
Examples:

Vectors - Arithmetic 🔗Expression
Patterns:	
%vector%[ ]++[ ]%vector%
%vector%[ ]--[ ]%vector%
%vector%[ ]**[ ]%vector%
%vector%[ ]//[ ]%vector%
Since:	2.2-dev28
Return Type:	Vector
Arithmetic expressions for vectors.
Examples:

Vectors - Create from XYZ 🔗Expression
Patterns:	
[a] [new] vector [(from|at|to)] %number%,[ ]%number%(,[ ]| and )%number%
Since:	2.2-dev28
Return Type:	Vector
Creates a vector from x, y and z values.
Examples:

Vectors - Cross Product 🔗Expression
Patterns:	
%vector% cross %vector%
Since:	2.2-dev28
Return Type:	Vector
Gets the cross product between two vectors.
Examples:

Vectors - Cylindrical Shape 🔗Expression
Patterns:	
[a] [new] cylindrical vector [(from|with)] [radius] %number%, [yaw] %number%(,| and) [height] %number%
Since:	2.2-dev28
Return Type:	Vector
Forms a 'cylindrical shaped' vector using yaw to manipulate the current point.
Examples:

Vectors - Dot Product 🔗Expression
Patterns:	
%vector% dot %vector%
Since:	2.2-dev28
Return Type:	Number
Gets the dot product between two vectors.
Examples:

Vectors - Length 🔗Expression
Patterns:	
[the] (vector|standard|normal) length[s] of %vectors%
%vectors%'[s] (vector|standard|normal) length[s]
Since:	2.2-dev28
Return Type:	Number
Gets or sets the length of a vector.
Examples:

Vectors - Location Vector Offset 🔗Expression
Patterns:	
%location% offset by [[the] vectors] %vectors%
%location%[ ]~[~][ ]%vectors%
Since:	2.2-dev28
Return Type:	Location
Returns the location offset by vectors.
Examples:

Vectors - Normalized 🔗Expression
Patterns:	
normalize[d] %vector%
%vector% normalized
Since:	2.2-dev28
Return Type:	Vector
Returns the same vector but with length 1.
Examples:

Vectors - Random Vector 🔗Expression
Patterns:	
[a] random vector
Since:	2.2-dev28, 2.7 (signed components)
Return Type:	Vector
Creates a random unit vector.
Examples:

Vectors - Spherical Shape 🔗Expression
Patterns:	
[new] spherical vector [(from|with)] [radius] %number%, [yaw] %number%(,| and) [pitch] %number%
Since:	2.2-dev28
Return Type:	Vector
Forms a 'spherical shaped' vector using yaw and pitch to manipulate the current point.
Examples:

Vectors - Squared Length 🔗Expression
Patterns:	
[the] squared length[s] of %vectors%
%vectors%'[s] squared length[s]
Since:	2.2-dev28
Return Type:	Number
Gets the squared length of a vector.
Examples:

Vectors - Vector Between Locations 🔗Expression
Patterns:	
[the] vector (from|between) %location% (to|and) %location%
Since:	2.2-dev28
Return Type:	Vector
Creates a vector between two locations.
Examples:

Vectors - Vector from Location 🔗Expression
Patterns:	
[the] vector (of|from|to) %location%
%location%'s vector
Since:	2.2-dev28
Return Type:	Vector
Creates a vector from a location.
Examples:

Vectors - Vector from Pitch and Yaw 🔗Expression
Patterns:	
[a] [new] vector (from|with) yaw %number% and pitch %number%
Since:	2.2-dev28
Return Type:	Vector
Creates a vector from a yaw and pitch value.
Examples:

Vectors - Velocity 🔗Expression
Patterns:	
[the] velocit(y|ies) of %entities%
%entities%'[s] velocit(y|ies)
Since:	2.2-dev31
Return Type:	Vector
Gets or changes velocity of an entity.
Examples:

Vectors - XYZ Component 🔗Expression
Patterns:	
[the] [vector] (x|y|z) [component[s]] of %vectors%
%vectors%'[s] [vector] (x|y|z) [component[s]]
Since:	2.2-dev28
Return Type:	Number
Gets or changes the x, y or z component of a vector.
Examples:

Vehicle 🔗Expression
Patterns:	
[the] vehicle[s] of %entities%
%entities%'[s] vehicle[s]
Since:	2.0
Return Type:	Entity
The vehicle an entity is in, if any. This can actually be any entity, e.g. spider jockeys are skeletons that ride on a spider, so the spider is the 'vehicle' of the skeleton. See also: passenger
Examples:

Version 🔗Expression
Patterns:	
([craft]bukkit|minecraft|skript)( |-)version
Since:	2.0
Return Type:	Text
The version of Bukkit, Minecraft or Skript respectively.
Examples:

Version String 🔗Expression
Patterns:	
[the] [shown|custom] version [string|text]
Since:	2.3
Usable in events:	Server List Ping
Requirements:	Paper 1.12.2+
Return Type:	Text
The text to show if the protocol version of the server doesn't match with protocol version of the client. You can check the protocol version expression for more information about this. This can only be set in a server list ping event.
Examples:

View Distance 🔗Expression
Patterns:	
[the] view distance[s] of %players%
%players%'[s] view distance[s]
Since:	2.4
Requirements:	Paper
Return Type:	integer
The view distance of a player as set by the server. Can be changed. NOTE: This is the view distance sent by the server to the player. This has nothing to do with client side view distance settings NOTE: This may not work on some versions (such as MC 1.14.x). The return value in this case will be the view distance set in system.properties.
Examples:

View Distance of Client 🔗Expression
Patterns:	
[the] client view distance[s] of %players%
%players%'[s] client view distance[s]
Since:	2.5
Requirements:	1.13.2+
Return Type:	long
The view distance of the client. Can not be changed. This differs from the server side view distance of player as this will retrieve the view distance the player has set on their client.
Examples:

Weather 🔗Expression
Patterns:	
[the] weather [(in|of) %worlds%]
%worlds%'[s] weather
Since:	1.0
Usable in events:	weather change
Return Type:	Weather Type
The weather in the given or the current world.
Examples:

Whitelist 🔗Expression
Patterns:	
[the] white[ ]list
Since:	2.5.2
Return Type:	Offline Player
A server's whitelist.This expression can be used to add/remove players to/from the whitelist, to enable it and disable it (set whitelist to true / set whitelist to false), and to empty it (reset whitelist)
Examples:

World 🔗Expression
Patterns:	
[the] world [of %locations/entities/chunk%]
%locations/entities/chunk%'[s] world
Since:	1.0
Return Type:	World
The world the event occurred in.
Examples:

World Environment 🔗Expression
Patterns:	
[the] [world] environment of %worlds%
%worlds%'[s] [world] environment
Since:	2.7
Return Type:	World Environment
The environment of a world
Examples:

World Seed 🔗Expression
Patterns:	
[the] seed[s] (from|of) %worlds%
%worlds%'[s] seed[s]
Since:	2.2-dev35
Return Type:	long
The seed of given world. Note that it will be returned as Minecraft internally treats seeds, not as you specified it in world configuration.
Examples:

World from Name 🔗Expression
Patterns:	
[the] world [(named|with name)] %text%
Since:	2.6.1
Return Type:	World
Returns the world from a string.
Examples:

Worlds 🔗Expression
Patterns:	
[(all [[of] the]|the)] worlds
Since:	1.0
Return Type:	World
All worlds of the server, useful for looping.
Examples:

X Times 🔗Expression
Patterns:	
%number% time[s]
once
twice
Since:	1.4.6
Return Type:	long
Integers between 1 and X, used in loops to loop X times.
Examples:

X of Item 🔗Expression
Patterns:	
%number% of %item stacks/item types/entity type%
Since:	1.2
Return Type:	Object
An expression to be able to use a certain amount of items where the amount can be any expression. Please note that this expression is not stable and might be replaced in the future.
Examples:

Yaw / Pitch 🔗Expression
Patterns:	
[the] (yaw|pitch) of %locations/vectors%
%locations/vectors%'[s] (yaw|pitch)
Since:	2.0, 2.2-dev28 (vector yaw/pitch)
Return Type:	Number
The yaw or pitch of a location or vector.
Examples:

Action Bar 🔗Effect
Patterns:	
send [the] action[ ]bar [with text] %text% to %players%
Since:	2.3
Sends an action bar message to the given player(s).
Examples:

Ban 🔗Effect
Patterns:	
ban %texts/offline players% [(by reason of|because [of]|on account of|due to) %text%] [for %time span%]
unban %texts/offline players%
ban %players% by IP [(by reason of|because [of]|on account of|due to) %text%] [for %time span%]
unban %players% by IP
IP(-| )ban %players% [(by reason of|because [of]|on account of|due to) %text%] [for %time span%]
(IP(-| )unban|un[-]IP[-]ban) %players%
Since:	1.4, 2.1.1 (ban reason), 2.5 (timespan)
Bans or unbans a player or an IP address. If a reason is given, it will be shown to the player when they try to join the server while banned. A length of ban may also be given to apply a temporary ban. If it is absent for any reason, a permanent ban will be used instead. We recommend that you test your scripts so that no accidental permanent bans are applied.
Note that banning people does not kick them from the server. Consider using the kick effect after applying a ban.

Examples:

Break Block 🔗Effect
Patterns:	
break %blocks% [naturally] [using %item type%]
Since:	2.4
Breaks the block and spawns items as if a player had mined it
You can add a tool, which will spawn items based on how that tool would break the block (ie: When using a hand to break stone, it drops nothing, whereas with a pickaxe it drops cobblestone)

Examples:

Broadcast 🔗Effect
Patterns:	
broadcast %objects% [(to|in) %worlds%]
Since:	1.0, 2.6 (broadcasting objects), 2.6.1 (using advanced formatting)
Broadcasts a message to the server.
Examples:

Cancel Command Cooldown 🔗Effect
Patterns:	
(cancel|ignore) [the] [current] [command] cooldown
un(cancel|ignore) [the] [current] [command] cooldown
Since:	2.2-dev34
Only usable in commands. Makes it so the current command usage isn't counted towards the cooldown.
Examples:

Cancel Drops 🔗Effect
Patterns:	
(cancel|clear|delete) [the] drops [of (items|[e]xp[erience][s])]
(cancel|clear|delete) [the] (item|[e]xp[erience]) drops
Since:	2.4
Usable in events:	death, break / mine
Requirements:	1.12.2 or newer (cancelling item drops of blocks)
Cancels drops of items or experiences in a death or block break event. Please note that this doesn't keep items or experiences of a dead player. If you want to do that, use the Keep Inventory / Experience effect.
Examples:

Cancel Event 🔗Effect
Patterns:	
cancel [the] event
uncancel [the] event
Since:	1.0
Cancels the event (e.g. prevent blocks from being placed, or damage being taken).
Examples:

Change: Set/Add/Remove/Delete/Reset 🔗Effect
Patterns:	
(add|give) %objects% to %~objects%
increase %~objects% by %objects%
give %~objects% %objects%
set %~objects% to %objects%
remove (all|every) %objects% from %~objects%
(remove|subtract) %objects% from %~objects%
reduce %~objects% by %objects%
(delete|clear) %~objects%
reset %~objects%
Since:	1.0 (set, add, remove, delete), 2.0 (remove all)
A very general effect that can change many expressions. Many expressions can only be set and/or deleted, while some can have things added to or removed from them.
Examples:

Charge Creeper 🔗Effect
Patterns:	
make %living entities% [a[n]] (charged|powered|((un|non[-])charged|(un|non[-])powered)) [creeper[s]]
(charge|power|(uncharge|unpower)) %living entities%
Since:	2.5
Charges or uncharges a creeper. A creeper is charged when it has been struck by lightning.
Examples:

Color Items 🔗Effect
Patterns:	
(dye|colo[u]r|paint) %item types% %color%
(dye|colo[u]r|paint) %item types% \(%number%, %number%, %number%\)
Since:	2.0, 2.2-dev26 (maps and potions)
Colors items in a given color. You can also use RGB codes if you feel limited with the 16 default colors. RGB codes are three numbers from 0 to 255 in the order (red, green, blue), where (0,0,0) is black and (255,255,255) is white. Armor is colorable for all Minecraft versions. With Minecraft 1.11 or newer you can also color potions and maps. Note that the colors might not look exactly how you'd expect.
Examples:

Command 🔗Effect
Patterns:	
[execute] [the] command %texts% [by %players/console%]
[execute] [the] %players/console% command %texts%
(let|make) %players/console% execute [[the] command] %texts%
Since:	1.0
Executes a command. This can be useful to use other plugins in triggers.
Examples:

Connect 🔗Effect
Patterns:	
connect %players% to [server] %text%
send %players% to server %text%
Since:	2.3
Connects a player to another bungeecord server
Examples:

Continue 🔗Effect
Patterns:	
continue [loop]
Since:	2.2-dev37, 2.7 (while loops)
Skips the value currently being looped, moving on to the next value if it exists.
Examples:

Damage/Heal/Repair 🔗Effect
Patterns:	
damage %living entities/item types% by %number% [heart[s]] [with fake cause %damage cause%]
heal %living entities% [by %number% [heart[s]]]
repair %item types% [by %number%]
Since:	1.0
Damage/Heal/Repair an entity, or item.
Examples:

Delay 🔗Effect
Patterns:	
(wait|halt) [for] %time span%
Since:	1.4
Delays the script's execution by a given timespan. Please note that delays are not persistent, e.g. trying to create a tempban script with ban player → wait 7 days → unban player will not work if you restart your server anytime within these 7 days. You also have to be careful even when using small delays!
Examples:

Do If 🔗Effect
Patterns:	
<.+> if <.+>
Since:	2.3
Execute an effect if a condition is true.
Examples:

Drop 🔗Effect
Patterns:	
drop %item types/experience points% [%directions% %locations%] [without velocity]
Since:	1.0
Drops one or more items.
Examples:

Enable/Disable/Reload Script File 🔗Effect
Patterns:	
((enable|load)|reload|(disable|unload)) s(c|k)ript [file] %text%
Since:	2.4
Enables, disables, or reloads a script file.
Examples:

Enchant/Disenchant 🔗Effect
Patterns:	
enchant %~item types% with %enchantment types%
disenchant %~item types%
Since:	2.0
Enchant or disenchant an existing item.
Examples:

Equip 🔗Effect
Patterns:	
equip [%living entities%] with %item types%
make %living entities% wear %item types%
unequip %item types% [from %living entities%]
unequip %living entities%'[s] (armor|equipment)
Since:	1.0, 2.7 (multiple entities, unequip)
Equips or unequips an entity with some given armor. This will replace any armor that the entity is wearing.
Examples:

Exit 🔗Effect
Patterns:	
(exit|stop) [trigger]
(exit|stop) [(1|a|the|this)] (section|loop|conditional)
(exit|stop) <\d+> (section|loop|conditional)s
(exit|stop) all (section|loop|conditional)s
Since:	unknown (before 2.1)
Exits a given amount of loops and conditionals, or the entire trigger.
Examples:

Explode Creeper 🔗Effect
Patterns:	
instantly explode [creeper[s]] %living entities%
explode [creeper[s]] %living entities% instantly
ignite creeper[s] %living entities%
start (ignition|explosion) [process] of [creeper[s]] %living entities%
stop (ignition|explosion) [process] of [creeper[s]] %living entities%
Since:	2.5
Requirements:	Paper 1.13 or newer/Spigot 1.14 or newer. Ignition can be stopped on Paper 1.13 or newer.
Starts the explosion process of a creeper or instantly explodes it.
Examples:

Explosion 🔗Effect
Patterns:	
[(create|make)] [an] explosion (of|with) (force|strength|power) %number% [%directions% %locations%] [with fire]
[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number% [%directions% %locations%]
[(create|make)] [a] fake explosion [%directions% %locations%]
[(create|make)] [an] explosion[ ]effect [%directions% %locations%]
Since:	1.0
Creates an explosion of a given force. The Minecraft Wiki has an article on explosions which lists the explosion forces of TNT, creepers, etc. Hint: use a force of 0 to create a fake explosion that does no damage whatsoever, or use the explosion effect introduced in Skript 2.0. Starting with Bukkit 1.4.5 and Skript 2.0 you can use safe explosions which will damage entities but won't destroy any blocks.
Examples:

Feed 🔗Effect
Patterns:	
feed [the] %players% [by %number% [beef[s]]]
Since:	2.2-dev34
Feeds the specified players.
Examples:

Force Attack 🔗Effect
Patterns:	
make %living entities% attack %entity%
force %living entities% to attack %entity%
Since:	2.5.1
Requirements:	Minecraft 1.15.2+
Makes a living entity attack an entity with a melee attack.
Examples:

Force Respawn 🔗Effect
Patterns:	
force %players% to respawn
Since:	2.2-dev21
Forces player(s) to respawn if they are dead. If this is called without delay from death event, one tick is waited before respawn attempt.
Examples:

Hide Player from Server List 🔗Effect
Patterns:	
hide %players% (in|on|from) [the] server list
hide %players%'[s] info[rmation] (in|on|from) [the] server list
Since:	2.3
Hides a player from the hover list and decreases the online players count (only if the player count wasn't changed before).
Examples:

Ignite/Extinguish 🔗Effect
Patterns:	
(ignite|set fire to) %entities% [for %time span%]
(set|light) %entities% on fire [for %time span%]
extinguish %entities%
Since:	1.4
Lights entities on fire or extinguishes them.
Examples:

Keep Inventory / Experience 🔗Effect
Patterns:	
keep [the] (inventory|items) [(and [e]xp[erience][s] [point[s]])]
keep [the] [e]xp[erience][s] [point[s]] [(and (inventory|items))]
Since:	2.4
Usable in events:	death
Keeps the inventory or/and experiences of the dead player in a death event.
Examples:

Kick 🔗Effect
Patterns:	
kick %players% [(by reason of|because [of]|on account of|due to) %text%]
Since:	1.0
Kicks a player from the server.
Examples:

Kill 🔗Effect
Patterns:	
kill %entities%
Since:	1.0
Kills an entity. Note: This effect does not set the entity's health to 0 (which causes issues), but damages the entity by 100 times its maximum health.
Examples:

Knockback 🔗Effect
Patterns:	
(apply knockback to|knock[back]) %living entities% [%direction%] [with (strength|force) %number%]
Since:	2.7
Requirements:	Paper 1.19.2+
Apply the same velocity as a knockback to living entities in a direction. Mechanics such as knockback resistance will be factored in.
Examples:

Launch firework 🔗Effect
Patterns:	
(launch|deploy) [[a] firework [with effect[s]]] %firework effects% at %locations% [([with] (duration|power)|timed) %number%]
Since:	2.4
Launch firework effects at the given location(s).
Examples:

Leash entities 🔗Effect
Patterns:	
(leash|lead) %living entities% to %entity%
make %entity% (leash|lead) %living entities%
un(leash|lead) [holder of] %living entities%
Since:	2.3
Leash living entities to other entities.
Examples:

Lightning 🔗Effect
Patterns:	
(create|strike) lightning[([ ]effect)] %directions% %locations%
Since:	1.4
Strike lightning at a given location. Can use 'lightning effect' to create a lightning that does not harm entities or start fires.
Examples:

Load Server Icon 🔗Effect
Patterns:	
load [the] server icon (from|of) [the] [image] [file] %text%
Since:	2.3
Requirements:	Paper 1.12.2 or newer
Loads server icons from the given files. You can get the loaded icon using the last loaded server icon expression. Please note that the image must be 64x64 and the file path starts from the server folder.
Examples:

Locally Suppress Warning 🔗Effect
Patterns:	
[local[ly]] suppress [the] (conflict|variable save|[missing] conjunction[s]|starting [with] expression[s]) warning[s]
Since:	2.3
Suppresses target warnings from the current script.
Examples:

Log 🔗Effect
Patterns:	
log %texts% [(to|in) [file[s]] %texts%]
Since:	2.0
Writes text into a .log file. Skript will write these files to /plugins/Skript/logs. NB: Using 'server.log' as the log file will write to the default server log. Omitting the log file altogether will log the message as '[Skript] [<script>.sk] <message>' in the server log.
Examples:

Look At 🔗Effect
Patterns:	
(force|make) %living entities% [to] (face [towards]|look [(at|towards)]) (%entity%['s (feet|eyes)]|(feet|eyes) of %entity%) [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]
(force|make) %living entities% [to] (face [towards]|look [(at|towards)]) %vector/location% [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]
Since:	2.7
Requirements:	Paper 1.17+, Paper 1.19.1+ (Players & Look Anchors)
Forces the mob(s) or player(s) to look at an entity, vector or location. Vanilla max head pitches range from 10 to 50.
Examples:

Make Egg Hatch 🔗Effect
Patterns:	
make [the] egg [not] hatch
Since:	2.7
Usable in events:	Egg Throw
Makes the egg hatch in a Player Egg Throw event.
Examples:

Make Fly 🔗Effect
Patterns:	
force %players% to [(start|stop)] fly[ing]
make %players% (start|stop) flying
make %players% fly
Since:	2.2-dev34
Forces a player to start/stop flying.
Examples:

Make Incendiary 🔗Effect
Patterns:	
make %entities% [not] incendiary
make %entities%'[s] explosion [not] (incendiary|fiery)
make [the] [event(-| )]explosion [not] (incendiary|fiery)
Since:	2.5
Sets if an entity's explosion will leave behind fire. This effect is also usable in an explosion prime event.
Examples:

Make Invisible 🔗Effect
Patterns:	
make %living entities% (invisible|not visible)
make %living entities% (visible|not invisible)
Since:	2.7
Makes a living entity visible/invisible. This is not a potion and therefore does not have features such as a time limit or particles. When setting an entity to invisible while using an invisibility potion on it, the potion will be overridden and when it runs out the entity keeps its invisibility.
Examples:

Make Invulnerable 🔗Effect
Patterns:	
make %entities% invulnerable
make %entities% (not invulnerable|vulnerable)
Since:	2.5
Makes an entity invulnerable/not invulnerable.
Examples:

Make Say 🔗Effect
Patterns:	
make %players% (say|send [the] message[s]) %texts%
force %players% to (say|send [the] message[s]) %texts%
Since:	2.3
Forces a player to send a message to the chat. If the message starts with a slash it will force the player to use command.
Examples:

Message 🔗Effect
Patterns:	
(message|send [message[s]]) %objects% [to %players/console%] [from %player%]
Since:	1.0, 2.2-dev26 (advanced features), 2.5.2 (optional sender), 2.6 (sending objects)
Requirements:	Minecraft 1.16.4+ for optional sender
Sends a message to the given player. Only styles written in given string or in formatted expressions will be parsed. Adding an optional sender allows the messages to be sent as if a specific player sent them. This is useful with Minecraft 1.16.4's new chat ignore system, in which players can choose to ignore other players, but for this to work, the message needs to be sent from a player.
Examples:

Open Book 🔗Effect
Patterns:	
(open|show) book %item type% (to|for) %players%
Since:	2.5.1
Requirements:	Minecraft 1.14.2+
Opens a written book to a player.
Examples:

Open/Close Inventory 🔗Effect
Patterns:	
(open|show) (((crafting [table]|workbench)|chest|anvil|hopper|dropper|dispenser) [(view|window|inventory)]|%inventory/inventory type%) (to|for) %players%
close [the] inventory [view] (to|of|for) %players%
close %players%'[s] inventory [view]
Since:	2.0, 2.1.1 (closing), 2.2-Fixes-V10 (anvil), 2.4 (hopper, dropper, dispenser
Opens an inventory to a player. The player can then access and modify the inventory as if it was a chest that he just opened. Please note that currently 'show' and 'open' have the same effect, but 'show' will eventually show an unmodifiable view of the inventory in the future.
Examples:

Pathfind 🔗Effect
Patterns:	
make %living entities% (pathfind|move) to[wards] %living entity/location% [at speed %number%]
make %living entities% stop (pathfinding|moving)
Since:	2.7
Requirements:	Paper
Make an entity pathfind towards a location or another entity. Not all entities can pathfind. If the pathfinding target is another entity, the entities may or may not continuously follow the target.
Examples:

Play Effect 🔗Effect
Patterns:	
(play|show) %visual effects% (on|%directions%) %entities/locations% [(to %players%|in (radius|range) of %number%)]
(play|show) %number% %visual effects% (on|%directions%) %locations% [(to %players%|in (radius|range) of %number%)]
Since:	2.1
Plays a visual effect at a given location or on a given entity. Please note that some effects can only be played on entities, e.g. wolf hearts or the hurt effect, and that these are always visible to all players.
Examples:

Play Sound 🔗Effect
Patterns:	
play sound[s] %texts% [(in|from) %sound category%] [(at|with) volume %number%] [(and|at|with) pitch %number%] at %locations% [(to|for) %players%]
play sound[s] %texts% [(in|from) %sound category%] [(at|with) volume %number%] [(and|at|with) pitch %number%] [(to|for) %players%] [(at|from) %locations%]
Since:	2.2-dev28, 2.4 (sound categories)
Plays a sound at given location for everyone or just for given players, or plays a sound to specified players. Both Minecraft sound names and Spigot sound names are supported. Playing resource pack sounds are supported too. The sound category is 'master' by default.
Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself.

Examples:

Player Info Visibility 🔗Effect
Patterns:	
hide [all] player [related] info[rmation] [(in|on|from) [the] server list]
(show|reveal) [all] player [related] info[rmation] [(in|to|on|from) [the] server list]
Since:	2.3
Usable in events:	server list ping
Requirements:	Paper 1.12.2 or newer
Sets whether all player related information is hidden in the server list. The Vanilla Minecraft client will display ??? (dark gray) instead of player counts and will not show the hover hist when hiding player info. The version string can override the ???. Also the Online Players Count and Max Players expressions will return -1 when hiding player info.
Examples:

Player Visibility 🔗Effect
Patterns:	
hide %players% [(from|for) %players%]
reveal %players% [(to|for|from) %players%]
Since:	2.3
Change visibility of a player for the given players. When reveal is used in combination of the hidden players expression and the viewers are not specified, this will default it to the given player in the hidden players expression.
Note: if a player was hidden and relogs, this player will be visible again.

Examples:

Poison/Cure 🔗Effect
Patterns:	
poison %living entities% [for %time span%]
(cure|unpoison) %living entities% [(from|of) poison]
Since:	1.3.2
Poison or cure a creature.
Examples:

Potion Effects 🔗Effect
Patterns:	
apply %potion effects% to %living entities%
apply [potion of] %potions% [potion] [[[of] tier] %number%] to %living entities% [for %time span%] [(replacing [the] existing effect)]
apply ambient [potion of] %potions% [potion] [[[of] tier] %number%] to %living entities% [for %time span%] [(replacing [the] existing effect)]
apply [potion of] %potions% [potion] [[[of] tier] %number%] without [any] particles to %living entities% [for %time span%] [(replacing [the] existing effect)]
Since:	2.0, 2.2-dev27 (ambient and particle-less potion effects), 2.5 (replacing existing effect), 2.5.2 (potion effects)
Apply or remove potion effects to/from entities.
Examples:

Push 🔗Effect
Patterns:	
(push|thrust) %entities% %direction% [(at|with) (speed|velocity|force) %number%]
Since:	1.4.6
Push entities around.
Examples:

PvP 🔗Effect
Patterns:	
enable PvP [in %worlds%]
disable PVP [in %worlds%]
Since:	1.3.4
Set the PvP state for a given world.
Examples:

Replace 🔗Effect
Patterns:	
replace [(all|every)] %texts% in %texts% with %text% [with case sensitivity]
replace [(all|every)] %texts% with %text% in %texts% [with case sensitivity]
replace first %texts% in %texts% with %text% [with case sensitivity]
replace first %texts% with %text% in %text% [with case sensitivity]
replace [(all|every)] %item types% in %inventories% with %item type%
replace [(all|every)] %item types% with %item type% in %inventories%
Since:	2.0, 2.2-dev24 (replace in multiple strings and replace items in inventory), 2.5 (replace first, case sensitivity)
Replaces all occurrences of a given text with another text. Please note that you can only change variables and a few expressions, e.g. a message or a line of a sign.
Examples:

Return 🔗Effect
Patterns:	
return %objects%
Since:	2.2
Makes a function return a value
Examples:

Send Block Change 🔗Effect
Patterns:	
make %players% see %blocks% as %item type/block data%
Since:	2.2-dev37c, 2.5.1 (block data support)
Makes a player see a block as something it really isn't. BlockData support is only for MC 1.13+
Examples:

Send Resource Pack 🔗Effect
Patterns:	
send [the] resource pack [from [[the] URL]] %text% to %players%
send [the] resource pack [from [[the] URL]] %text% with hash %text% to %players%
Since:	2.4
Request that the player's client download and switch resource packs. The client will download the resource pack in the background, and will automatically switch to it once the download is complete. The URL must be a direct download link.
The hash is used for caching, the player won't have to re-download the resource pack that way. The hash must be SHA-1, you can get SHA-1 hash of your resource pack using this online tool.

The resource pack request action can be used to check status of the sent resource pack request.

Examples:

Shear 🔗Effect
Patterns:	
shear %living entities%
un[-]shear %living entities%
Since:	2.0
Shears or 'un-shears' a sheep. Please note that no wool is dropped, this only sets the 'sheared' state of the sheep.
Examples:

Shoot 🔗Effect
Patterns:	
shoot %entity types% [from %living entities/locations%] [(at|with) (speed|velocity) %number%] [%direction%]
(make|let) %living entities/locations% shoot %entity types% [(at|with) (speed|velocity) %number%] [%direction%]
Since:	1.4
Shoots a projectile (or any other entity) from a given entity.
Examples:

Silence Entity 🔗Effect
Patterns:	
silence %entities%
unsilence %entities%
make %entities% silent
make %entities% not silent
Since:	2.5
Controls whether or not an entity is silent.
Examples:

Stop Server 🔗Effect
Patterns:	
(stop|shut[ ]down) [the] server
restart [the] server
Since:	2.5
Stops or restarts the server. If restart is used when the restart-script spigot.yml option isn't defined, the server will stop instead.
Examples:

Stop Sound 🔗Effect
Patterns:	
stop (all sound[s]|sound[s] %texts%) [(in|from) %sound category%] [(from playing to|for) %players%]
stop playing sound[s] %texts% [(in|from) %sound category%] [(to|for) %players%]
Since:	2.4, 2.7 (stop all sounds)
Requirements:	MC 1.17.1 (stop all sounds)
Stops specific or all sounds from playing to a group of players. Both Minecraft sound names and Spigot sound names are supported. Resource pack sounds are supported too. The sound category is 'master' by default. A sound can't be stopped from a different category.
Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself.

Examples:

Swing Hand 🔗Effect
Patterns:	
make %living entities% swing [their] [main] hand
make %living entities% swing [their] off[ ]hand
Since:	2.5.1
Requirements:	Minecraft 1.15.2+
Makes an entity swing their hand. This does nothing if the entity does not have an animation for swinging their hand.
Examples:

Teleport 🔗Effect
Patterns:	
[force] teleport %entities% (to|%direction%) %location%
Since:	1.0
Teleport an entity to a specific location. This effect is delayed by default on Paper, meaning certain syntax such as the return effect for functions cannot be used after this effect. The keyword 'force' indicates this effect will not be delayed, which may cause lag spikes or server crashes when using this effect to teleport entities to unloaded chunks.
Examples:

Title - Reset 🔗Effect
Patterns:	
reset [the] title[s] [of %players%]
reset [the] %players%'[s] title[s]
Since:	2.3
Resets the title of the player to the default values.
Examples:

Title - Send 🔗Effect
Patterns:	
send title %text% [with subtitle %text%] [to %players%] [for %time span%] [with fade[(-| )]in %time span%] [(and|with) fade[(-| )]out %time span%]
send subtitle %text% [to %players%] [for %time span%] [with fade[(-| )]in %time span%] [(and|with) fade[(-| )]out %time span%]
Since:	2.3
Sends a title/subtitle to the given player(s) with optional fadein/stay/fadeout times for Minecraft versions 1.11 and above.
If you're sending only the subtitle, it will be shown only if there's a title displayed at the moment, otherwise it will be sent with the next title. To show only the subtitle, use: send title " " with subtitle "yourtexthere" to player.

Note: if no input is given for the times, it will keep the ones from the last title sent, use the reset title effect to restore the default values.

Examples:

Toggle 🔗Effect
Patterns:	
(close|turn off|de[-]activate) %blocks%
(toggle|switch) [[the] state of] %blocks%
(open|turn on|activate) %blocks%
Since:	1.4
Toggle the state of a block.
Examples:

Toggle Flight 🔗Effect
Patterns:	
(allow|enable) (fly|flight) (for|to) %players%
(disallow|disable) (fly|flight) (for|to) %players%
Since:	2.3
Toggle the flight mode of a player.
Examples:

Tree 🔗Effect
Patterns:	
(grow|create|generate) tree [of type %tree type%] %directions% %locations%
(grow|create|generate) %tree type% %directions% %locations%
Since:	1.0
Creates a tree. This may require that there is enough space above the given location and that the block below is dirt/grass, but it is possible that the tree will just grow anyways, possibly replacing every block in its path.
Examples:

Vectors - Rotate Around Vector 🔗Effect
Patterns:	
rotate %vectors% around %vector% by %number% [degrees]
Since:	2.2-dev28
Rotates a vector around another vector
Examples:

Vectors - Rotate around XYZ 🔗Effect
Patterns:	
rotate %vectors% around (x|y|z)(-| )axis by %number% [degrees]
Since:	2.2-dev28
Rotates a vector around x, y, or z axis by some degrees
Examples:

Vehicle 🔗Effect
Patterns:	
(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entities/entity types%
(make|let|force) %entities% [to] (dismount|(dismount|leave) [(from|of)] [(any|the[ir]|his|her)] vehicle[s])
(eject|dismount) [(any|the)] passenger[s] (of|from) %entities%
Since:	2.0
Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow, etc.
Examples:

op/deop 🔗Effect
Patterns:	
[de[-]]op %offline players%
Since:	1.0
Grant/revoke a user operator state.
Examples:

Spawn 🔗EffectSection
Patterns:	
(spawn|summon) %entity types% [%directions% %locations%]
(spawn|summon) %number% of %entity types% [%directions% %locations%]
Since:	1.0, 2.6.1 (with section)
Spawn a creature. This can be used as an effect and as a section. If it is used as a section, the section is run before the entity is added to the world. You can modify the entity in this section, using for example 'event-entity' or 'cow'. Do note that other event values, such as 'player', won't work in this section.
Examples:

Alphanumeric 🔗Condition
Patterns:	
%texts% (is|are) alphanumeric
%texts% (isn't|is not|aren't|are not) alphanumeric
Since:	2.4
Checks if the given string is alphanumeric.
Examples:

Can Build 🔗Condition
Patterns:	
%players% (can|(is|are) allowed to) build %directions% %locations%
%players% (can('t|not)|(is|are)(n't| not) allowed to) build %directions% %locations%
Since:	2.0
Requirements:	Supported regions plugin
Tests whether a player is allowed to build at a certain location. This condition requires a supported regions plugin to be installed.
Examples:

Can Fly 🔗Condition
Patterns:	
%players% can fly
%players% (can't|cannot|can not) fly
Since:	2.3
Whether a player is allowed to fly.
Examples:

Can Hold 🔗Condition
Patterns:	
%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %item types%
%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have) [enough] space (for|to hold)) %item types%
Since:	1.0
Tests whether a player or a chest can hold the given item.
Examples:

Can See 🔗Condition
Patterns:	
%players% (is|are) [in]visible for %players%
%players% can see %players%
%players% (is|are)(n't| not) [in]visible for %players%
%players% can('t| not) see %players%
Since:	2.3
Checks whether the given players can see another players.
Examples:

Chance 🔗Condition
Patterns:	
chance of %number%[(\%)]
Since:	1.0
A condition that randomly succeeds or fails. Valid values are between 0% and 100%, or if the percent sign is omitted between 0 and 1.
Examples:

Comparison 🔗Condition
Patterns:	
[(neither)] %objects% ((is|are)[(n't| not| neither)] ((greater|more|higher|bigger|larger) than|above)|>) %objects%
[(neither)] %objects% ((is|are)[(n't| not| neither)] (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|>=) %objects%
[(neither)] %objects% ((is|are)[(n't| not| neither)] ((less|smaller|lower) than|below)|<) %objects%
[(neither)] %objects% ((is|are)[(n't| not| neither)] (less|smaller|lower|below) [than] or (equal to|the same as)|<=) %objects%
[(neither)] %objects% ((is|are) (not|neither)|isn't|aren't|!=) [equal to] %objects%
[(neither)] %objects% (is|are|=) [(equal to|the same as)] %objects%
[(neither)] %objects% (is|are) between %objects% and %objects%
[(neither)] %objects% (is not|are not|isn't|aren't) between %objects% and %objects%
[(neither)] %objects% (was|were)[(n't| not| neither)] ((greater|more|higher|bigger|larger) than|above) %objects%
[(neither)] %objects% (was|were)[(n't| not| neither)] (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
[(neither)] %objects% (was|were)[(n't| not| neither)] ((less|smaller|lower) than|below) %objects%
[(neither)] %objects% (was|were)[(n't| not| neither)] (less|smaller|lower|below) [than] or (equal to|the same as) %objects%
[(neither)] %objects% ((was|were) (not|neither)|wasn't|weren't) [equal to] %objects%
[(neither)] %objects% (was|were) [(equal to|the same as)] %objects%
[(neither)] %objects% (was|were) between %objects% and %objects%
[(neither)] %objects% (was not|were not|wasn't|weren't) between %objects% and %objects%
[(neither)] %objects% (will be|(will (not|neither) be|won't be)) ((greater|more|higher|bigger|larger) than|above) %objects%
[(neither)] %objects% (will be|(will (not|neither) be|won't be)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
[(neither)] %objects% (will be|(will (not|neither) be|won't be)) ((less|smaller|lower) than|below) %objects%
[(neither)] %objects% (will be|(will (not|neither) be|won't be)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%
[(neither)] %objects% ((will (not|neither) be|won't be)|(isn't|aren't|is not|are not) (turning|changing) [in]to) [equal to] %objects%
[(neither)] %objects% (will be [(equal to|the same as)]|(is|are) (turning|changing) [in]to) %objects%
[(neither)] %objects% will be between %objects% and %objects%
[(neither)] %objects% (will not be|won't be) between %objects% and %objects%
Since:	1.0
A very general condition, it simply compares two values. Usually you can only compare for equality (e.g. block is/isn't of <type>), but some values can also be compared using greater than/less than. In that case you can also test for whether an object is between two others. Note: This is the only element where not all patterns are shown. It has actually another two sets of similar patters, but with (was|were) or will be instead of (is|are) respectively, which check different time states of the first expression.
Examples:

Contains 🔗Condition
Patterns:	
%inventories% (has|have) %item types% [in [(the[ir]|his|her|its)] inventory]
%inventories% (doesn't|does not|do not|don't) have %item types% [in [(the[ir]|his|her|its)] inventory]
%inventories/texts/objects% contain[s] %item types/texts/objects%
%inventories/texts/objects% (doesn't|does not|do not|don't) contain %item types/texts/objects%
Since:	1.0
Checks whether an inventory contains an item, a text contains another piece of text, or a list (e.g. {list variable::*} or 'drops') contains another object.
Examples:

Damage Cause 🔗Condition
Patterns:	
[the] damage (was|is|has)[n('|o)t] [been] (caused|done|made) by %damage cause%
Since:	2.0
Tests what kind of damage caused a damage event. Refer to the Damage Cause type for a list of all possible causes.
Examples:

Do Respawn Anchors Work 🔗Condition
Patterns:	
respawn anchors [do[(n't| not)]] work in %worlds%
Since:	2.7
Requirements:	Minecraft 1.16+
Checks whether or not respawn anchors work in a world.
Examples:

Egg Will Hatch 🔗Condition
Patterns:	
[the] egg (will|will not|won't) hatch
Since:	2.7
Usable in events:	Egg Throw
Whether the egg will hatch in a Player Egg Throw event.
Examples:

Entity is Wet 🔗Condition
Patterns:	
%entities% (is|are) wet
%entities% (isn't|is not|aren't|are not) wet
Since:	2.6.1
Requirements:	Paper 1.16+
Checks whether an entity is wet or not (in water, rain or a bubble column).
Examples:

Entity is in Liquid 🔗Condition
Patterns:	
%entities% (is|are) in (water|lava|[a] bubble[ ]column|rain)
%entities% (isn't|is not|aren't|are not) in (water|lava|[a] bubble[ ]column|rain)
Since:	2.6.1
Requirements:	Minecraft 1.16+ (in water), Paper 1.16+ (in rain, lava and bubble column)
Checks whether an entity is in rain, lava, water or a bubble column.
Examples:

Event Cancelled 🔗Condition
Patterns:	
[the] event is cancel[l]ed
[the] event (is not|isn't) cancel[l]ed
Since:	2.2-dev36
Checks whether or not the event is cancelled.
Examples:

Exists/Is Set 🔗Condition
Patterns:	
%~objects% (exist[s]|(is|are) set)
%~objects% (do[es](n't| not) exist|(is|are)(n't| not) set)
Since:	1.2
Checks whether a given expression or variable is set.
Examples:

Has AI 🔗Condition
Patterns:	
%living entities% (has|have) (ai|artificial intelligence)
%living entities% (doesn't|does not|do not|don't) have (ai|artificial intelligence)
Since:	2.5
Checks whether an entity has AI.
Examples:

Has Client Weather 🔗Condition
Patterns:	
%players% (has|have) [a] (client|custom) weather [set]
%players% (doesn't|does not|do not|don't) have [a] (client|custom) weather [set]
Since:	2.3
Checks whether the given players have a custom client weather
Examples:

Has Custom Model Data 🔗Condition
Patterns:	
%item types% (has|have) [custom] model data
%item types% (doesn't|does not|do not|don't) have [custom] model data
Since:	2.5
Requirements:	1.14+
Check if an item has a custom model data tag
Examples:

Has Metadata 🔗Condition
Patterns:	
%metadata holders% (has|have) metadata [(value|tag)[s]] %texts%
%metadata holders% (doesn't|does not|do not|don't) have metadata [(value|tag)[s]] %texts%
Since:	2.2-dev36
Checks whether a metadata holder has a metadata tag.
Examples:

Has Permission 🔗Condition
Patterns:	
%players/console% (has|have) [the] permission[s] %texts%
%players/console% (doesn't|does not|do not|don't) have [the] permission[s] %texts%
Since:	1.0
Test whether a player has a certain permission.
Examples:

Has Played Before 🔗Condition
Patterns:	
%offline players% [(has|have|did)] [already] play[ed] [on (this|the) server] (before|already)
%offline players% (has not|hasn't|have not|haven't|did not|didn't) [(already|yet)] play[ed] [on (this|the) server] (before|already|yet)
Since:	1.4, 2.7 (multiple players)
Checks whether a player has played on this server before. You can also use on first join if you want to make triggers for new players.
Examples:

Has Potion 🔗Condition
Patterns:	
%living entities% (has|have) potion[s] [effect[s]] %potions%
%living entities% (doesn't|does not|do not|don't) have potion[s] [effect[s]] %potions%
Since:	2.6.1
Checks whether the given living entities have specific potion effects.
Examples:

Has Resource Pack 🔗Condition
Patterns:	
%players% (has|have) [a] resource pack [(loaded|installed)]
%players% (doesn't|does not|do not|don't) have [a] resource pack [(loaded|installed)]
Since:	2.4
Requirements:	Paper 1.9 or newer
Checks whether the given players have a server resource pack loaded. Please note that this can't detect player's own resource pack, only the resource pack that sent by the server.
Examples:

Has Scoreboard Tag 🔗Condition
Patterns:	
%entities% (has|have) [the] score[ ]board tag[s] %texts%
%entities% (doesn't|does not|do not|don't) have [the] score[ ]board tag[s] %texts%
Since:	2.3
Checks whether the given entities has the given scoreboard tags.
Examples:

Ignition Process 🔗Condition
Patterns:	
[creeper[s]] %living entities% ((is|are)|(isn't|is not|aren't|are not)) going to explode
[creeper[s]] %living entities% ((is|are)|(isn't|is not|aren't|are not)) in the (ignition|explosion) process
creeper[s] %living entities% ((is|are)|(isn't|is not|aren't|are not)) ignited
Since:	2.5
Requirements:	Paper 1.13 or newer
Checks if a creeper is going to explode.
Examples:

Is Alive 🔗Condition
Patterns:	
%entities% (is|are) (alive|dead)
%entities% (isn't|is not|aren't|are not) (alive|dead)
Since:	2.0, 2.4-alpha4 (non-living entity support)
Checks whether an entity is alive. Works for non-living entities too.
Examples:

Is Banned 🔗Condition
Patterns:	
%offline players/texts% (is|are) banned
%players/texts% (is|are) IP[(-| )]banned
%offline players/texts% (isn't|is not|aren't|are not) banned
%players/texts% (isn't|is not|aren't|are not) IP[(-| )]banned
Since:	1.4
Checks whether a player or IP is banned.
Examples:

Is Bed/Anchor Spawn 🔗Condition
Patterns:	
[the] respawn location (was|is)[(n'| no)t] [a] (bed|respawn anchor)
Since:	2.7
Usable in events:	respawn
Requirements:	Minecraft 1.16+
Checks what the respawn location of a player in the respawn event is.
Examples:

Is Block 🔗Condition
Patterns:	
%item types% (is|are) ([a] block|blocks)
%item types% (isn't|is not|aren't|are not) ([a] block|blocks)
Since:	2.4
Checks whether an item is a block.
Examples:

Is Block Redstone Powered 🔗Condition
Patterns:	
%blocks% (is|are) redstone powered
%blocks% (is|are) indirectly redstone powered
%blocks% (is|are)(n't| not) redstone powered
%blocks% (is|are)(n't| not) indirectly redstone powered
Since:	2.5
Checks if a block is indirectly or directly powered by redstone
Examples:

Is Blocking 🔗Condition
Patterns:	
%players% (is|are) (blocking|defending) [with [a] shield]
%players% (isn't|is not|aren't|are not) (blocking|defending) [with [a] shield]
Since:	unknown (before 2.1)
Checks whether a player is blocking with their shield.
Examples:

Is Burning 🔗Condition
Patterns:	
%entities% (is|are) (burning|ignited|on fire)
%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)
Since:	1.4.4
Checks whether an entity is on fire, e.g. a zombie due to being in sunlight, or any entity after falling into lava.
Examples:

Is Charged 🔗Condition
Patterns:	
%living entities% (is|are) (charged|powered)
%living entities% (isn't|is not|aren't|are not) (charged|powered)
Since:	2.5
Checks if a creeper is charged (powered).
Examples:

Is Edible 🔗Condition
Patterns:	
%item types% (is|are) edible
%item types% (isn't|is not|aren't|are not) edible
Since:	2.2-dev36
Checks whether an item is edible.
Examples:

Is Empty 🔗Condition
Patterns:	
%inventories/slots/texts% (is|are) empty
%inventories/slots/texts% (isn't|is not|aren't|are not) empty
Since:	unknown (before 2.1)
Checks whether an inventory, an inventory slot, or a text is empty.
Examples:

Is Enchanted 🔗Condition
Patterns:	
%item types% (is|are) enchanted [with %enchantment type%]
%item types% (isn't|is not|aren't|are not) enchanted [with %enchantment type%]
Since:	1.4.6
Checks whether an item is enchanted.
Examples:

Is Flammable 🔗Condition
Patterns:	
%item types% (is|are) flammable
%item types% (isn't|is not|aren't|are not) flammable
Since:	2.2-dev36
Checks whether an item is flammable.
Examples:

Is Flying 🔗Condition
Patterns:	
%players% (is|are) flying
%players% (isn't|is not|aren't|are not) flying
Since:	1.4.4
Checks whether a player is flying.
Examples:

Is Frozen 🔗Condition
Patterns:	
%entities% (is|are) frozen
%entities% (isn't|is not|aren't|are not) frozen
Since:	2.7
Checks whether an entity is frozen.
Examples:

Is Fuel 🔗Condition
Patterns:	
%item types% (is|are) [furnace] fuel
%item types% (isn't|is not|aren't|are not) [furnace] fuel
Since:	2.5.1
Requirements:	Minecraft 1.11.2+
Checks whether an item can be used as fuel in a furnace.
Examples:

Is Gliding 🔗Condition
Patterns:	
%living entities% (is|are) gliding
%living entities% (isn't|is not|aren't|are not) gliding
Since:	2.7
Checks whether a living entity is gliding.
Examples:

Is Holding 🔗Condition
Patterns:	
[%living entities%] ha(s|ve) %item types% in [main] hand
[%living entities%] (is|are) holding %item types% [in main hand]
[%living entities%] ha(s|ve) %item types% in off[(-| )]hand
[%living entities%] (is|are) holding %item types% in off[(-| )]hand
[%living entities%] (ha(s|ve) not|do[es]n't have) %item types% in [main] hand
[%living entities%] (is not|isn't) holding %item types% [in main hand]
[%living entities%] (ha(s|ve) not|do[es]n't have) %item types% in off[(-| )]hand
[%living entities%] (is not|isn't) holding %item types% in off[(-| )]hand
Since:	1.0
Checks whether a player is holding a specific item. Cannot be used with endermen, use 'entity is [not] an enderman holding <item type>' instead.
Examples:

Is Incendiary 🔗Condition
Patterns:	
%entities% ((is|are) incendiary|cause[s] a[n] (incendiary|fiery) explosion)
%entities% ((is not|are not|isn't|aren't) incendiary|(does not|do not|doesn't|don't) cause[s] a[n] (incendiary|fiery) explosion)
the [event(-| )]explosion (is|(is not|isn't)) (incendiary|fiery)
Since:	2.5
Checks if an entity will create fire when it explodes. This condition is also usable in an explosion prime event.
Examples:

Is Interactable 🔗Condition
Patterns:	
%item types% (is|are) interactable
%item types% (isn't|is not|aren't|are not) interactable
Since:	2.5.2
Requirements:	Minecraft 1.13+
Checks wether or not a block is interactable.
Examples:

Is Invisible 🔗Condition
Patterns:	
%living entities% (is|are) (invisible|visible)
%living entities% (isn't|is not|aren't|are not) (invisible|visible)
Since:	2.7
Checks whether a living entity is invisible.
Examples:

Is Invulnerable 🔗Condition
Patterns:	
%entities% (is|are) invulnerable
%entities% (isn't|is not|aren't|are not) invulnerable
Since:	2.5
Checks whether an entity is invulnerable.
Examples:

Is Leashed 🔗Condition
Patterns:	
%living entities% (is|are) leashed
%living entities% (isn't|is not|aren't|are not) leashed
Since:	2.5
Checks to see if an entity is currently leashed.
Examples:

Is Loaded 🔗Condition
Patterns:	
chunk[s] %directions% [%locations%] (is|are)[((n't| not))] loaded
chunk [at] %number%, %number% (in|of) [world] %world% is[((n't| not))] loaded
[world[s]] %worlds% (is|are)[((n't| not))] loaded
Since:	2.3, 2.5 (revamp with chunk at location/coords)
Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.
Examples:

Is Member/Owner of Region 🔗Condition
Patterns:	
%offline players% (is|are) ([a] member|[(the|an)] owner) of [[the] region] %regions%
%offline players% (is|are)(n't| not) ([a] member|[(the|an)] owner) of [[the] region] %regions%
Since:	2.1
Requirements:	Supported regions plugin
Checks whether a player is a member or owner of a particular region. This condition requires a supported regions plugin to be installed.
Examples:

Is Normalized 🔗Condition
Patterns:	
%vectors% (is|are) normalized
%vectors% (isn't|is not|aren't|are not) normalized
Since:	2.5.1
Requirements:	Minecraft 1.13.2+
Checks whether a vector is normalized i.e. length of 1
Examples:

Is Occluding 🔗Condition
Patterns:	
%item types% (is|are) occluding
%item types% (isn't|is not|aren't|are not) occluding
Since:	2.5.1
Checks whether an item is a block and completely blocks vision.
Examples:

Is Online 🔗Condition
Patterns:	
%offline players% (is|are) (online|offline)
%offline players% (isn't|is not|aren't|are not) (online|offline)
Since:	1.4
Checks whether a player is online.
Examples:

Is Operator 🔗Condition
Patterns:	
%offline players% (is|are) [[a] server|an] op[erator][s]
%offline players% (isn't|is not|aren't|are not) [[a] server|an] op[erator][s]
Since:	2.7
Checks whether a player is a server operator.
Examples:

Is Passable 🔗Condition
Patterns:	
%blocks% (is|are) passable
%blocks% (isn't|is not|aren't|are not) passable
Since:	2.5.1
Requirements:	Minecraft 1.13.2+
Checks whether a block is passable. A block is passable if it has no colliding parts that would prevent players from moving through it. Blocks like tall grass, flowers, signs, etc. are passable, but open doors, fence gates, trap doors, etc. are not because they still have parts that can be collided with.
Examples:

Is Plugin Enabled 🔗Condition
Patterns:	
plugin[s] %texts% (is|are) enabled
plugin[s] %texts% (is|are)(n't| not) enabled
plugin[s] %texts% (is|are) disabled
Since:	2.6
Check if a plugin is enabled/disabled on the server. Plugin names can be found in the plugin's 'plugin.yml' file or by using the '/plugins' command, they are NOT the name of the plugin's jar file. When checking if a plugin is not enabled, this will return true if the plugin is either disabled or not on the server. When checking if a plugin is disabled, this will return true if the plugin is on the server and is disabled.
Examples:

Is Poisoned 🔗Condition
Patterns:	
%living entities% (is|are) poisoned
%living entities% (isn't|is not|aren't|are not) poisoned
Since:	1.4.4
Checks whether an entity is poisoned.
Examples:

Is Preferred Tool 🔗Condition
Patterns:	
%item types% (is|are) %blocks/block datas%'s preferred tool[s]
%item types% (is|are) [the|a] preferred tool[s] (for|of) %blocks/block datas%
%item types% (is|are)(n't| not) %blocks/block datas%'s preferred tool[s]
%item types% (is|are)(n't| not) [the|a] preferred tool[s] (for|of) %blocks/block datas%
Since:	2.7
Requirements:	1.16.5+, Paper 1.19.2+ (blockdata)
Checks whether an item is the preferred tool for a block. A preferred tool is one that will drop the block's item when used. For example, a wooden pickaxe is a preferred tool for grass and stone blocks, but not for iron ore.
Examples:

Is Riding 🔗Condition
Patterns:	
%entities% (is|are) riding [%entity types%]
%entities% (isn't|is not|aren't|are not) riding [%entity types%]
Since:	2.0
Tests whether an entity is riding another or is in a vehicle.
Examples:

Is Riptiding 🔗Condition
Patterns:	
%living entities% (is|are) riptiding
%living entities% (isn't|is not|aren't|are not) riptiding
Since:	2.5
Checks to see if an entity is currently using the Riptide enchantment.
Examples:

Is Script Loaded 🔗Condition
Patterns:	
script[s] [%texts%] (is|are) loaded
script[s] [%texts%] (isn't|is not|aren't|are not) loaded
Since:	2.2-dev31
Check if the current script, or another script, is currently loaded.
Examples:

Is Silent 🔗Condition
Patterns:	
%entities% (is|are) silent
%entities% (isn't|is not|aren't|are not) silent
Since:	2.5
Checks whether an entity is silent i.e. its sounds are disabled.
Examples:

Is Sleeping 🔗Condition
Patterns:	
%players% (is|are) sleeping
%players% (isn't|is not|aren't|are not) sleeping
Since:	1.4.4
Checks whether a player is sleeping.
Examples:

Is Slime Chunk 🔗Condition
Patterns:	
%chunk% (is|are) ([a] slime chunk|slime chunks|slimey)
%chunk% (isn't|is not|aren't|are not) ([a] slime chunk|slime chunks|slimey)
Since:	2.3
Tests whether a chunk is a so-called slime chunk. Slimes can generally spawn in the swamp biome and in slime chunks. For more info, see the Minecraft wiki.
Examples:

Is Sneaking 🔗Condition
Patterns:	
%players% (is|are) sneaking
%players% (isn't|is not|aren't|are not) sneaking
Since:	1.4.4
Checks whether a player is sneaking.
Examples:

Is Solid 🔗Condition
Patterns:	
%item types% (is|are) solid
%item types% (isn't|is not|aren't|are not) solid
Since:	2.2-dev36
Checks whether an item is solid.
Examples:

Is Sprinting 🔗Condition
Patterns:	
%players% (is|are) sprinting
%players% (isn't|is not|aren't|are not) sprinting
Since:	1.4.4
Checks whether a player is sprinting.
Examples:

Is Stackable 🔗Condition
Patterns:	
%item stacks% (is|are) stackable
%item stacks% (isn't|is not|aren't|are not) stackable
Since:	2.7
Checks whether an item is stackable.
Examples:

Is Swimming 🔗Condition
Patterns:	
%living entities% (is|are) swimming
%living entities% (isn't|is not|aren't|are not) swimming
Since:	2.3
Requirements:	1.13 or newer
Checks whether a living entity is swimming.
Examples:

Is Tameable 🔗Condition
Patterns:	
%living entities% (is|are) tameable
%living entities% (isn't|is not|aren't|are not) tameable
Since:	2.5
Check if an entity is tameable.
Examples:

Is Transparent 🔗Condition
Patterns:	
%item types% (is|are) transparent
%item types% (isn't|is not|aren't|are not) transparent
Since:	2.2-dev36
Checks whether an item is transparent. Note that this condition may not work for all blocks, due to the transparency list used by Spigot not being completely accurate.
Examples:

Is Unbreakable 🔗Condition
Patterns:	
%item types% (is|are) unbreakable
%item types% (isn't|is not|aren't|are not) unbreakable
Since:	2.5.1
Requirements:	Minecraft 1.11+
Checks whether an item is unbreakable.
Examples:

Is Valid 🔗Condition
Patterns:	
%entities% (is|are) valid
%entities% (isn't|is not|aren't|are not) valid
Since:	2.7
Checks whether an entity has died or been despawned for some other reason.
Examples:

Is Wearing 🔗Condition
Patterns:	
%living entities% (is|are) wearing %item types%
%living entities% (isn't|is not|aren't|are not) wearing %item types%
Since:	1.0
Checks whether a player is wearing some armour.
Examples:

Is Whitelisted 🔗Condition
Patterns:	
[the] server (is|is(n't| not)) white[ ]listed
%players% (is|are)[(n't| not)] white[ ]listed
Since:	2.5.2
Whether or not the server or a player is whitelisted.
Examples:

Is Within 🔗Condition
Patterns:	
%locations% (is|are) within %location% and %location%
%locations% (isn't|is not|aren't|are not) within %location% and %location%
%locations% (is|are) (within|in[side [of]]) %entity/chunk/world/block%
%locations% (isn't|is not|aren't|are not) (within|in[side [of]]) %entity/chunk/world/block%
Since:	2.7
Requirements:	MC 1.17+ (within block)
Whether a location is within something else. The "something" can be a block, an entity, a chunk, a world, or a cuboid formed by two other locations. Note that using the is between condition will refer to a straight line between locations, while this condition will refer to the cuboid between locations.
Examples:

Is Within Location 🔗Condition
Patterns:	
%locations% (is|are) within %location% and %location%
%locations% (isn't|is not|aren't|are not) within %location% and %location%
Since:	2.7
Whether a location is within two other locations forming a cuboid. Using the is between condition will refer to a straight line between locations.
Examples:

Is Within Radius 🔗Condition
Patterns:	
%locations% (is|are) within %number% (block|metre|meter)[s] (around|of) %locations%
%locations% (isn't|is not|aren't|are not) within %number% (block|metre|meter)[s] (around|of) %locations%
Since:	2.7
Checks whether a location is within a certain radius of another location.
Examples:

Is a Skript command 🔗Condition
Patterns:	
%text% (is|are) [a] s(k|c)ript (command|cmd)
%text% (isn't|is not|aren't|are not) [a] s(k|c)ript (command|cmd)
Since:	2.6
Checks whether a command/string is a custom Skript command.
Examples:

Is of Type 🔗Condition
Patterns:	
%item stacks/entities% (is|are) of type[s] %entity types/entity types%
%item stacks/entities% (isn't|is not|aren't|are not) of type[s] %entity types/entity types%
Since:	1.4
Checks whether an item of an entity is of the given type. This is mostly useful for variables, as you can use the general 'is' condition otherwise (e.g. 'victim is a creeper').
Examples:

Is on Ground 🔗Condition
Patterns:	
%entities% (is|are) on [the] ground
%entities% (isn't|is not|aren't|are not) on [the] ground
Since:	2.2-dev26
Checks whether an entity is on ground.
Examples:

Matches 🔗Condition
Patterns:	
%texts% (match[es]|do[es](n't| not) match) %texts%
%texts% (partially match[es]|do[es](n't| not) partially match) %texts%
Since:	2.5.2
Checks whether the defined strings match the input regexes (Regular expressions).
Examples:

Method Exists 🔗Condition
Patterns:	
method[s] %texts% [do(esn't|n't)] exist[s]
Since:	2.7
Checks if a method exists
Examples:

Projectile Can Bounce 🔗Condition
Patterns:	
%projectiles% can bounce
%projectiles% (can't|cannot|can not) bounce
Since:	2.5.1
Whether or not a projectile can bounce.
Examples:

PvP 🔗Condition
Patterns:	
(is PvP|PvP is) enabled [in %worlds%]
(is PvP|PvP is) disabled [in %worlds%]
Since:	1.3.4
Checks the PvP state of a world.
Examples:

Region Contains 🔗Condition
Patterns:	
[[the] region] %regions% contain[s] %directions% %locations%
%locations% (is|are) ([contained] in|part of) [[the] region] %regions%
[[the] region] %regions% (do|does)(n't| not) contain %directions% %locations%
%locations% (is|are)(n't| not) (contained in|part of) [[the] region] %regions%
Since:	2.1
Requirements:	Supported regions plugin
Checks whether a location is contained in a particular region. This condition requires a supported regions plugin to be installed.
Examples:

Resource Pack 🔗Condition
Patterns:	
[the] resource pack (was|is|has) [been] %resource pack state%
[the] resource pack (was|is|has)(n't| not) [been] %resource pack state%
Since:	2.4
Usable in events:	resource pack request response
Checks state of the resource pack in a resource pack request response event.
Examples:

Running Minecraft 🔗Condition
Patterns:	
running [below] minecraft %text%
Since:	2.5
Checks if current Minecraft version is given version or newer.
Examples:

Starts/Ends With 🔗Condition
Patterns:	
%texts% (start|end)[s] with %texts%
%texts% (doesn't|does not|do not|don't) (start|end) with %texts%
Since:	2.2-dev36, 2.5.1 (multiple strings support)
Checks if a text starts or ends with another.
Examples:

Time 🔗Condition
Patterns:	
%date% (was|were)( more|(n't| not) less) than %time span% [ago]
%date% (was|were)((n't| not) more| less) than %time span% [ago]
Since:	2.0
Tests whether a given real time was more or less than some time span ago.
Examples:

Conditionals 🔗Section
Patterns:	
else
else [parse] if <.+>
else [parse] if (any|at least one [of])
else [parse] if [all]
[parse] if (any|at least one [of])
[parse] if [all]
[parse] if <.+>
then [run]
implicit:<.+>
Since:	1.0
Conditional sections if: executed when its condition is true else if: executed if all previous chained conditionals weren't executed, and its condition is true else: executed if all previous chained conditionals weren't executed
parse if: a special case of 'if' condition that its code will not be parsed if the condition is not true else parse if: another special case of 'else if' condition that its code will not be parsed if all previous chained conditionals weren't executed, and its condition is true

Examples:

Loop 🔗Section
Patterns:	
loop %objects%
Since:	1.0
Loop sections repeat their code with multiple values.
A loop will loop through all elements of the given expression, e.g. all players, worlds, items, etc. The conditions & effects inside the loop will be executed for every of those elements, which can be accessed with ‘loop-’, e.g. send "hello" to loop-player. When a condition inside a loop is not fulfilled the loop will start over with the next element of the loop. You can however use stop loop to exit the loop completely and resume code execution after the end of the loop.

Loopable Values All expressions that represent more than one value, e.g. ‘all players’, ‘worlds’, etc., as well as list variables, can be looped. You can also use a list of expressions, e.g. loop the victim and the attacker, to execute the same code for only a few values.

List Variables When looping list variables, you can also use loop-index in addition to loop-value inside the loop. loop-value is the value of the currently looped variable, and loop-index is the last part of the variable's name (the part where the list variable has its asterisk *).

Examples:

While Loop 🔗Section
Patterns:	
[do] while <.+>
Since:	2.0, 2.6 (do while)
While Loop sections are loops that will just keep repeating as long as a condition is met.
Examples:

At Time 🔗Event
Patterns:	
[on] at %time% [in %worlds%]
Since:	1.3.4
An event that occurs at a given minecraft time in every world or only in specific worlds.
Examples:

On Anvil Damage 🔗Event
Patterns:	
[on] anvil damag(e|ing)
Since:	2.7
Requirements:	Paper
Called when an anvil is damaged/broken from being used to repair/rename items. Note: this does not include anvil damage from falling.
Examples:

On Anvil Prepare 🔗Event
Patterns:	
[on] anvil prepar(e|ing)
Since:	2.7
Called when an item is put in a slot for repair by an anvil. Please note that this event is called multiple times in a single item slot move.
Examples:

On AoE Cloud Effect 🔗Event
Patterns:	
[on] (area|AoE) [cloud] effect
Since:	2.2-dev21
Called when area effect cloud applies its potion effect. This happens every 5 ticks by default.
Examples:

On Arm Swing 🔗Event
Patterns:	
[on] [player] arm swing
Since:	2.5.1
Called when a player swings his arm.
Examples:

On Armor Change 🔗Event
Patterns:	
[on] [player] armor change[d]
Since:	2.5
Requirements:	Paper
Called when armor pieces of a player are changed.
Examples:

On Bed Enter 🔗Event
Patterns:	
[on] bed enter[ing]
[on] [player] enter[ing] [a] bed
Since:	1.0
Called when a player starts sleeping.
Examples:

On Bed Leave 🔗Event
Patterns:	
[on] bed leav(e|ing)
[on] [player] leav(e|ing) [a] bed
Since:	1.0
Called when a player leaves a bed.
Examples:

On Block Damage 🔗Event
Patterns:	
[on] block damag(ing|e)
Since:	1.0
Called when a player starts to break a block. You can usually just use the leftclick event for this.
Examples:

On Block Fertilize 🔗Event
Patterns:	
[on] [block] fertilize
Since:	2.5
Requirements:	Minecraft 1.13 or newer
Called when a player fertilizes blocks.
Examples:

On Block Growth 🔗Event
Patterns:	
[on] (plant|crop|block) grow[(th|ing)] [[of] %item types%]
Since:	2.2-Fixes-V10
Called when a crop grows. Alternative to new form of generic grow event.
Examples:

On Book Edit 🔗Event
Patterns:	
[on] book (edit|change|write)
Since:	2.2-dev31
Called when a player edits a book.
Examples:

On Book Sign 🔗Event
Patterns:	
[on] book sign[ing]
Since:	2.2-dev31
Called when a player signs a book.
Examples:

On Break / Mine 🔗Event
Patterns:	
[on] [block] (break[ing]|min(e|ing)) [[of] %item types/block datas%]
Since:	1.0 (break), unknown (mine), 2.6 (BlockData support)
Called when a block is broken by a player. If you use 'on mine', only events where the broken block dropped something will call the trigger.
Examples:

On Bucket Empty 🔗Event
Patterns:	
[on] bucket empty[ing]
[on] [player] empty[ing] [a] bucket
Since:	1.0
Called when a player empties a bucket. You can also use the place event with a check for water or lava.
Examples:

On Bucket fill 🔗Event
Patterns:	
[on] bucket fill[ing]
[on] [player] fill[ing] [a] bucket
Since:	1.0
Called when a player fills a bucket.
Examples:

On Burn 🔗Event
Patterns:	
[on] [block] burn[ing] [[of] %item types/block datas%]
Since:	1.0, 2.6 (BlockData support)
Called when a block is destroyed by fire.
Examples:

On Can Build Check 🔗Event
Patterns:	
[on] [block] can build check
Since:	1.0 (basic), 2.0 ([un]cancellable)
Called when a player rightclicks on a block while holding a block or a placeable item. You can either cancel the event to prevent the block from being built, or uncancel it to allow it. Please note that the data value of the block to be placed is not available in this event, only its ID.
Examples:

On Chat 🔗Event
Patterns:	
[on] chat
Since:	1.4.1
Called whenever a player chats. Use chat format to change message format. Use chat recipients to edit chat recipients.
Examples:

On Chunk Generate 🔗Event
Patterns:	
[on] chunk (generat|populat)(e|ing)
Since:	1.0
Called after a new chunk was generated.
Examples:

On Chunk Load 🔗Event
Patterns:	
[on] chunk load[ing]
Since:	1.0
Called when a chunk loads. The chunk might or might not contain mobs when it's loaded.
Examples:

On Chunk Unload 🔗Event
Patterns:	
[on] chunk unload[ing]
Since:	1.0
Called when a chunk is unloaded due to not being near any player.
Examples:

On Click 🔗Event
Patterns:	
[on] [(right|left)[( |-)]][mouse[( |-)]]click[ing] [on %entity type/item type%] [(with|using|holding) %item type%]
[on] [(right|left)[( |-)]][mouse[( |-)]]click[ing] (with|using|holding) %item type% on %entity type/item type%
Since:	1.0
Called when a user clicks on a block, an entity or air with or without an item in their hand. Please note that rightclick events with an empty hand while not looking at a block are not sent to the server, so there's no way to detect them. Also note that a leftclick on an entity is an attack and thus not covered by the 'click' event, but the 'damage' event.
Examples:

On Combust 🔗Event
Patterns:	
[on] combust[ing]
Since:	1.0
Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by standing in direct sunlight (zombies, skeletons).
Examples:

On Command 🔗Event
Patterns:	
[on] command [%text%]
Since:	2.0
Called when a player enters a command (not necessarily a Skript command) but you can check if command is a skript command, see Is a Skript command condition.
Examples:

On Connect 🔗Event
Patterns:	
[on] [player] connect[ing]
Since:	2.0
Called when the player connects to the server. This event is called before the player actually joins the server, so if you want to prevent players from joining you should prefer this event over on join.
Examples:

On Consume 🔗Event
Patterns:	
[on] [player] ((eat|drink)[ing]|consum(e|ing)) [[of] %item types%]
Since:	2.0
Called when a player is done eating/drinking something, e.g. an apple, bread, meat, milk or a potion.
Examples:

On Craft 🔗Event
Patterns:	
[on] [player] craft[ing] [[of] %item types%]
Since:	unknown (before 2.1)
Called when a player crafts an item.
Examples:

On Creeper Power 🔗Event
Patterns:	
[on] creeper power
Since:	1.0
Called when a creeper is struck by lighting and gets powered. Cancel the event to prevent the creeper from being powered.
Examples:

On Damage 🔗Event
Patterns:	
[on] damag(e|ing) [of %entity type%] [by %entity type%]
Since:	1.0, 2.7 (by entity)
Called when an entity receives damage, e.g. by an attack from another entity, lava, fire, drowning, fall, suffocation, etc.
Examples:

On Death 🔗Event
Patterns:	
[on] death [of %entity types%]
Since:	1.0
Called when a living entity (including players) dies.
Examples:

On Dispense 🔗Event
Patterns:	
[on] dispens(e|ing) [[of] %item types%]
Since:	unknown (before 2.1)
Called when a dispenser dispenses an item.
Examples:

On Drop 🔗Event
Patterns:	
[on] [player|entity] drop[ping] [[of] %item types%]
Since:	unknown (before 2.1), 2.7 (entity)
Called when a player drops an item from their inventory, or an entity drops an item, such as a chicken laying an egg.
Examples:

On Egg Throw 🔗Event
Patterns:	
[on] throw[ing] [of] [an] egg
[on] [player] egg throw
Since:	1.0
Called when a player throws an egg and it lands. You can just use the shoot event in most cases. However, this event allows modification of properties like the hatched entity type and the number of entities to hatch.
Examples:

On Enchant 🔗Event
Patterns:	
[on] [item] enchant
Since:	2.5
Called when a player successfully enchants an item. To get the enchanted item, see the enchant item expression
Examples:

On Enchant Prepare 🔗Event
Patterns:	
[on] [item] enchant prepare
Since:	2.5
Called when a player puts an item into enchantment table. This event may be called multiple times. To get the enchant item, see the enchant item expression
Examples:

On Enderman/Sheep/Silverfish/Falling Block 🔗Event
Patterns:	
[on] enderman place
[on] enderman pickup
[on] sheep eat
[on] silverfish enter
[on] silverfish exit
[on] falling block fall[ing]
[on] falling block land[ing]
Since:	unknown, 2.5.2 (falling block)
Called when an enderman places or picks up a block, a sheep eats grass, a silverfish boops into/out of a block or a falling block lands and turns into a block respectively.
Examples:

On Entity Dismount 🔗Event
Patterns:	
[on] dismount[ing]
Since:	2.2-dev13b
Called when an entity dismounts.
Examples:

On Entity Jump 🔗Event
Patterns:	
[on] entity jump[ing]
Since:	2.7
Requirements:	Paper 1.15.2+
Called when an entity jumps.
Examples:

On Entity Mount 🔗Event
Patterns:	
[on] mount[ing]
Since:	2.2-dev13b
Called when entity starts riding another.
Examples:

On Entity Portal 🔗Event
Patterns:	
[on] entity portal
Since:	2.5.3
Called when an entity uses a nether or end portal. Cancel the event to prevent the entity from teleporting.
Examples:

On Experience Change 🔗Event
Patterns:	
[on] [player] (level progress|[e]xp|experience) (change|update|increase|decrease)
Since:	2.7
Called when a player's experience changes.
Examples:

On Experience Spawn 🔗Event
Patterns:	
[on] [e]xp[erience] [orb] spawn
[on] spawn of [a[n]] [e]xp[erience] [orb]
Since:	2.0
Called whenever experience is about to spawn. Please note that this event will not fire for xp orbs spawned by plugins (including Skript) with Bukkit.
Examples:

On Explode 🔗Event
Patterns:	
[on] explo(d(e|ing)|sion)
Since:	1.0
Called when an entity (a primed TNT or a creeper) explodes.
Examples:

On Explosion Prime 🔗Event
Patterns:	
[on] explosion prime
Since:	1.0
Called when an explosive is primed, i.e. an entity will explode shortly. Creepers can abort the explosion if the player gets too far away, while TNT will explode for sure after a short time.
Examples:

On Fade 🔗Event
Patterns:	
[on] [block] fad(e|ing) [[of] %item types/block datas%]
Since:	1.0, 2.6 (BlockData support)
Called when a block 'fades away', e.g. ice or snow melts.
Examples:

On Firework Explode 🔗Event
Patterns:	
[on] [a] firework explo(d(e|ing)|sion) [colo[u]red %colors%]
Since:	2.4
Called when a firework explodes.
Examples:

On First Join 🔗Event
Patterns:	
[on] first (join|login)
Since:	1.3.7
Called when a player joins the server for the first time.
Examples:

On Fishing 🔗Event
Patterns:	
[on] [player] fish[ing]
Since:	1.0
Called when a player fishes something. This is not of much use yet.
Examples:

On Flight Toggle 🔗Event
Patterns:	
[on] [player] flight toggl(e|ing)
[on] [player] toggl(e|ing) flight
Since:	2.2-dev36
Called when a players stops/starts flying.
Examples:

On Flow 🔗Event
Patterns:	
[on] [block] flow[ing]
[on] block mov(e|ing)
Since:	1.0
Called when a blocks flows or teleports to another block. This not only applies to water and lava, but teleporting dragon eggs as well.
Examples:

On Form 🔗Event
Patterns:	
[on] [block] form[ing] [[of] %item types/block datas%]
Since:	1.0, 2.6 (BlockData support)
Called when a block is created, but not by a player, e.g. snow forms due to snowfall, water freezes in cold biomes. This isn't called when block spreads (mushroom growth, water physics etc.), as it has its own event (see spread event).
Examples:

On Fuel Burn 🔗Event
Patterns:	
[on] fuel burn[ing]
Since:	1.0
Called when a furnace burns an item from its fuel slot.
Examples:

On Gamemode Change 🔗Event
Patterns:	
[on] game[ ]mode change [to %gamemode%]
Since:	1.0
Called when a player's gamemode changes.
Examples:

On Gliding State Change 🔗Event
Patterns:	
[on] (gliding state change|toggl(e|ing) gliding)
Since:	2.2-dev21
Called when an entity toggles glider on or off, or when server toggles gliding state of an entity forcibly.
Examples:

On Grow 🔗Event
Patterns:	
[on] grow [of (%tree type%|%item type%)]
Since:	1.0 (2.2-dev20 for plants)
Called when a tree, giant mushroom or plant grows to next stage.
Examples:

On Hand Item Swap 🔗Event
Patterns:	
[on] swap[ping of] [(hand|held)] item[s]
Since:	2.3
Called whenever a player swaps the items in their main- and offhand slots. Works also when one or both of the slots are empty. The event is called before the items are actually swapped, so when you use the player's tool or player's offtool expressions, they will return the values before the swap - this enables you to cancel the event before anything happens.
Examples:

On Heal 🔗Event
Patterns:	
[on] heal[ing]
Since:	1.0
Called when an entity is healed, e.g. by eating (players), being fed (pets), or by the effect of a potion of healing (overworld mobs) or harm (nether mobs).
Examples:

On Horse Jump 🔗Event
Patterns:	
[on] horse jump
Since:	2.5.1
Called when a horse jumps.
Examples:

On Hunger Meter Change 🔗Event
Patterns:	
[on] (food|hunger) (level|met(er|re)|bar) chang(e|ing)
Since:	1.4.4
Called when the hunger bar of a player changes, i.e. either increases by eating or decreases over time.
Examples:

On Ignition 🔗Event
Patterns:	
[on] [block] ignit(e|ion)
Since:	1.0
Called when a block starts burning, i.e. a fire block is placed next to it and this block is flammable. The burn event will be called when the block is about do be destroyed by the fire.
Examples:

On Inventory Click 🔗Event
Patterns:	
[on] [player] inventory(-| )click[ing] [[at] %item types%]
Since:	2.2-Fixes-V10
Called when clicking on inventory slot.
Examples:

On Inventory Close 🔗Event
Patterns:	
[on] inventory clos(ing|e[d])
Since:	2.2-dev21
Called when player's currently viewed inventory is closed.
Examples:

On Inventory Open 🔗Event
Patterns:	
[on] inventory open[ed]
Since:	2.2-dev21
Called when an inventory is opened for player.
Examples:

On Inventory Pickup 🔗Event
Patterns:	
[on] inventory pick[ ]up
Since:	2.5.1
Called when an inventory (a hopper, a hopper minecart, etc.) picks up an item
Examples:

On Inventory Slot Change 🔗Event
Patterns:	
[on] [player] inventory slot chang(e|ing)
Since:	2.7
Requirements:	Paper 1.19.2+
Called when a slot in a player's inventory is changed. Warning: setting the event-slot to a new item can result in an infinite loop.
Examples:

On Item Break 🔗Event
Patterns:	
[on] [player] tool break[ing]
[on] [player] break[ing] [(a|the)] tool
Since:	2.1.1
Called when a player breaks their tool because its damage reached the maximum value. This event cannot be cancelled.
Examples:

On Item Damage 🔗Event
Patterns:	
[on] item damag(e|ing)
Since:	2.5
Called when an item is damaged. Most tools are damaged by using them; armor is damaged when the wearer takes damage.
Examples:

On Item Despawn 🔗Event
Patterns:	
[on] (item[ ][stack]|[item] %item types%) despawn[ing]
[on] [item[ ][stack]] despawn[ing] [[of] %item types%]
Since:	2.2-dev35
Called when an item is about to be despawned from the world, usually 5 minutes after it was dropped.
Examples:

On Item Mend 🔗Event
Patterns:	
[on] item mend[ing]
Since:	2.5.1
Requirements:	Minecraft 1.13 or newer
Called when a player has an item repaired via the Mending enchantment.
Examples:

On Item Merge 🔗Event
Patterns:	
[on] (item[ ][stack]|[item] %item types%) merg(e|ing)
[on] item[ ][stack] merg(e|ing) [[of] %item types%]
Since:	2.2-dev35
Called when dropped items merge into a single stack. event-entity will be the entity which is trying to merge, and future event-entity will be the entity which is being merged into.
Examples:

On Item Spawn 🔗Event
Patterns:	
[on] item spawn[ing] [[of] %item types%]
Since:	unknown (before 2.1)
Called whenever an item stack is spawned in a world, e.g. as drop of a block or mob, a player throwing items out of their inventory, or a dispenser dispensing an item (not shooting it).
Examples:

On Join 🔗Event
Patterns:	
[on] [player] (login|logging in|join[ing])
Since:	1.0
Called when the player joins the server. The player is already in a world when this event is called, so if you want to prevent players from joining you should prefer on connect over this event.
Examples:

On Jump 🔗Event
Patterns:	
[on] [player] jump[ing]
Since:	2.3
Called whenever a player jumps. This event requires PaperSpigot.
Examples:

On Kick 🔗Event
Patterns:	
[on] [player] (kick|being kicked)
Since:	1.0
Called when a player is kicked from the server. You can change the kick message or cancel the event entirely.
Examples:

On Language Change 🔗Event
Patterns:	
[on] [player] (language|locale) chang(e|ing)
[on] [player] chang(e|ing) (language|locale)
Since:	2.3
Called after a player changed their language in the game settings. You can use the language expression to get the current language of the player. This event requires Minecraft 1.12+.
Examples:

On Leaves Decay 🔗Event
Patterns:	
[on] leaves decay[ing]
Since:	1.0
Called when a leaf block decays due to not being connected to a tree.
Examples:

On Level Change 🔗Event
Patterns:	
[on] [player] level (change|up|down)
Since:	1.0, 2.4 (level up/down)
Called when a player's level changes, e.g. by gathering experience or by enchanting something.
Examples:

On Lightning Strike 🔗Event
Patterns:	
[on] lightning [strike]
Since:	1.0
Called when lightning strikes.
Examples:

On Loot Generate 🔗Event
Patterns:	
[on] loot generat(e|ing)
Since:	2.7
Requirements:	MC 1.16+
Called when a loot table of an inventory is generated in the world. For example, when opening a shipwreck chest.
Examples:

On Move 🔗Event
Patterns:	
[on] %entity type% (move|walk|step)
Since:	2.6
Requirements:	Paper 1.16.5+ (entity move)
Called when a player or entity moves. NOTE: Move event will only be called when the entity/player moves position, not orientation (ie: looking around). NOTE: These events can be performance heavy as they are called quite often. If you use these events, and later remove them, a server restart is recommended to clear registered events from Skript.
Examples:

On Move On 🔗Event
Patterns:	
[on] (step|walk)[ing] (on|over) %*item types%
Since:	2.0
Called when a player moves onto a certain type of block. Please note that using this event can cause lag if there are many players online.
Examples:

On Physics 🔗Event
Patterns:	
[on] [block] physics
Since:	1.4.6
Called when a physics check is done on a block. By cancelling this event you can prevent some things from happening, e.g. sand falling, dirt turning into grass, torches dropping if their supporting block is destroyed, etc.Please note that using this event might cause quite some lag since it gets called extremely often.
Examples:

On Pick Up 🔗Event
Patterns:	
[on] [(player|entity)] (pick[ ]up|picking up) [[of] %item types%]
Since:	unknown (before 2.1), 2.5 (entity)
Requirements:	1.12.2+ for entity
Called when a player/entity picks up an item. Please note that the item is still on the ground when this event is called.
Examples:

On Pig Zap 🔗Event
Patterns:	
[on] pig[ ]zap
Since:	1.0
Called when a pig is stroke by lightning and transformed into a zombie pigman. Cancel the event to prevent the transformation.
Examples:

On Piston Extend 🔗Event
Patterns:	
[on] piston extend[ing]
Since:	1.0
Called when a piston is about to extend.
Examples:

On Piston Retract 🔗Event
Patterns:	
[on] piston retract[ing]
Since:	1.0
Called when a piston is about to retract.
Examples:

On Place 🔗Event
Patterns:	
[on] [block] (plac(e|ing)|build[ing]) [[of] %item types/block datas%]
Since:	1.0, 2.6 (BlockData support)
Called when a player places a block.
Examples:

On Player Chunk Enters 🔗Event
Patterns:	
[on] [player] (enter[s] [a] chunk|chunk enter[ing])
Since:	2.7
Called when a player enters a chunk. Note that this event is based on 'player move' event, and may be called frequent internally.
Examples:

On Player Deep Sleep 🔗Event
Patterns:	
[on] [player] deep sleep[ing]
Since:	2.7
Requirements:	Paper 1.16+
Called when a player has slept long enough to count as passing the night/storm. Cancelling this event will prevent the player from being counted as deeply sleeping unless they exit and re-enter the bed.
Examples:

On Player Trade 🔗Event
Patterns:	
[on] player trad(e|ing)
Since:	2.7
Requirements:	Paper 1.16.5+
Called when a player has traded with a villager.
Examples:

On Player World Change 🔗Event
Patterns:	
[on] [player] world chang(ing|e[d])
Since:	2.2-dev28
Called when a player enters a world. Does not work with other entities!
Examples:

On Portal 🔗Event
Patterns:	
[on] [player] portal
Since:	1.0
Called when a player uses a nether or end portal. Cancel the event to prevent the player from teleporting.
Examples:

On Portal Create 🔗Event
Patterns:	
[on] portal creat(e|ion)
Since:	1.0, 2.5.3 (event-entity support)
Requirements:	Minecraft 1.14+ (event-entity support)
Called when a portal is created, either by a player or mob lighting an obsidian frame on fire, or by a nether portal creating its teleportation target in the nether/overworld. In Minecraft 1.14+, you can use the player in this event. Please note that there may not always be a player (or other entity) in this event.
Examples:

On Portal Enter 🔗Event
Patterns:	
[on] portal enter[ing]
[on] entering [a] portal
Since:	1.0
Called when an entity enters a nether portal or an end portal. Please note that this event will be fired many times for a nether portal.
Examples:

On Prepare Craft 🔗Event
Patterns:	
[on] [player] (preparing|beginning) craft[ing] [[of] %item types%]
Since:	2.2-Fixes-V10
Called just before displaying crafting result to player. Note that setting the result item might or might not work due to Bukkit bugs.
Examples:

On Pressure Plate / Trip 🔗Event
Patterns:	
[on] [step[ping] on] [a] [pressure] plate
[on] (trip|[step[ping] on] [a] tripwire)
Since:	1.0 (pressure plate), 1.4.4 (tripwire)
Called when a player steps on a pressure plate or tripwire respectively.
Examples:

On Projectile Collide 🔗Event
Patterns:	
[on] projectile collide
Since:	2.5
Requirements:	Paper
Called when a projectile collides with an entity.
Examples:

On Projectile Hit 🔗Event
Patterns:	
[on] projectile hit
Since:	1.0
Called when a projectile hits an entity or a block. Use the damage event with a check for a projectile to be able to use the entity that got hit in the case when the projectile hit a living entity. A damage event will even be fired if the damage is 0, e.g. when throwing snowballs at non-nether mobs.
Examples:

On Quit 🔗Event
Patterns:	
[on] (quit[ting]|disconnect[ing]|log[ ]out|logging out|leav(e|ing))
Since:	1.0 (simple disconnection)
Called when a player leaves the server.
Examples:

On Redstone 🔗Event
Patterns:	
[on] redstone [current] [chang(e|ing)]
Since:	1.0
Called when the redstone current of a block changes. This event is of not much use yet.
Examples:

On Region Enter/Leave 🔗Event
Patterns:	
[on] (enter[ing]|leav(e|ing)|exit[ing]) [of] ([a] region|[[the] region] %regions%)
[on] region (enter[ing]|leav(e|ing)|exit[ing])
Since:	2.1
Requirements:	Supported regions plugin
Called when a player enters or leaves a region. This event requires a supported regions plugin to be installed.
Examples:

On Resource Pack Request Response 🔗Event
Patterns:	
[on] resource pack [request] response
[on] resource pack [request] %resource pack states%
Since:	2.4
Called when a player takes action on a resource pack request sent via the send resource pack effect. The resource pack condition can be used to check the resource pack state.
This event will be triggered once when the player accepts or declines the resource pack request, and once when the resource pack is successfully installed or failed to download.

Examples:

On Respawn 🔗Event
Patterns:	
[on] [player] respawn[ing]
Since:	1.0
Called when a player respawns. You should prefer this event over the death event as the player is technically alive when this event is called.
Examples:

On Resurrect Attempt 🔗Event
Patterns:	
[on] [entity] resurrect[ion] [attempt]
Since:	2.2-dev28
Called when an entity dies, always. If they are not holding a totem, this is cancelled - you can, however, uncancel it.
Examples:

On Riptide 🔗Event
Patterns:	
[on] [use of] riptide [enchant[ment]]
Since:	2.5
Called when the player activates the riptide enchantment, using their trident to propel them through the air. Note: the riptide action is performed client side, so manipulating the player in this event may have undesired effects.
Examples:

On Script Load/Unload 🔗Event
Patterns:	
[on] [async] [script] (load|init|enable)
[on] [async] [script] (unload|stop|disable)
Since:	2.0
Called directly after the trigger is loaded, or directly before the whole script is unloaded. The keyword 'async' indicates the trigger can be ran asynchronously,
Examples:

On Server List Ping 🔗Event
Patterns:	
[on] server [list] ping
Since:	2.3
Called when a server list ping is coming in, generally when a Minecraft client pings the server to show its information in the server list. The IP expression can be used to get the IP adress of the pinger. This event can be cancelled on PaperSpigot 1.12.2+ only and this means the player will see the server as offline (but still can join).
Also you can use MOTD, Max Players, Online Players Count, Protocol Version, Version String, Hover List and Server Icon expressions, and Player Info Visibility and Hide Player from Server List effects to modify the server list.

Examples:

On Server Start/Stop 🔗Event
Patterns:	
[on] (server|skript) (start|load|enable)
[on] (server|skript) (stop|unload|disable)
Since:	2.0
Called when the server starts or stops (actually, when Skript starts or stops, so a /reload will trigger these events as well).
Examples:

On Sheep Regrow Wool 🔗Event
Patterns:	
[on] sheep [re]grow[ing] wool
Since:	2.2-dev21
Called when sheep regrows its sheared wool back.
Examples:

On Shoot 🔗Event
Patterns:	
[on] [projectile] shoot
Since:	1.0
Called whenever a projectile is shot. Use the shooter expression to get who shot the projectile.
Examples:

On Sign Change 🔗Event
Patterns:	
[on] sign (chang[e]|edit)[ing]
[on] [player] (chang[e]|edit)[ing] [a] sign
Since:	1.0
As signs are placed empty, this event is called when a player is done editing a sign.
Examples:

On Slime Split 🔗Event
Patterns:	
[on] slime split[ting]
Since:	2.2-dev26
Called when a slime splits. Usually this happens when a big slime dies.
Examples:

On Smelt 🔗Event
Patterns:	
[on] [ore] smelt[ing]
[on] smelt[ing] of ore
Since:	1.0
Called when a furnace smelts an item in its ore slot.
Examples:

On Sneak Toggle 🔗Event
Patterns:	
[on] [player] toggl(e|ing) sneak
[on] [player] sneak toggl(e|ing)
Since:	1.0
Called when a player starts or stops sneaking. Use is sneaking to get whether the player was sneaking before the event was called.
Examples:

On Spawn 🔗Event
Patterns:	
[on] spawn[ing] [of %entity types%]
Since:	1.0, 2.5.1 (non-living entities)
Called when an entity spawns (excluding players).
Examples:

On Spawn Change 🔗Event
Patterns:	
[on] [world] spawn change
Since:	1.0
Called when the spawn point of a world changes.
Examples:

On Spectate 🔗Event
Patterns:	
[on] [player] stop spectating [(of|from) %*entity types%]
[on] [player] (swap|switch) spectating [(of|from) %*entity types%]
[on] [player] start spectating [of %*entity types%]
Since:	2.7
Requirements:	Paper
Called with a player starts, stops or swaps spectating an entity.
Examples:

On Sponge Absorb 🔗Event
Patterns:	
[on] sponge absorb
Since:	2.5
Requirements:	Minecraft 1.13 or newer
Called when a sponge absorbs blocks.
Examples:

On Spread 🔗Event
Patterns:	
[on] spread[ing]
Since:	1.0
Called when a new block forms as a result of a block that can spread, e.g. water or mushrooms.
Examples:

On Sprint Toggle 🔗Event
Patterns:	
[on] [player] toggl(e|ing) sprint
[on] [player] sprint toggl(e|ing)
Since:	1.0
Called when a player starts or stops sprinting. Use is sprinting to get whether the player was sprinting before the event was called.
Examples:

On Swim Toggle 🔗Event
Patterns:	
[on] [entity] toggl(e|ing) swim
[on] [entity] swim toggl(e|ing)
Since:	2.3
Requirements:	1.13 or newer
Called when an entity swims or stops swimming.
Examples:

On Tame 🔗Event
Patterns:	
[on] [entity] tam(e|ing)
Since:	1.0
Called when a player tames a wolf or ocelot. Can be cancelled to prevent the entity from being tamed.
Examples:

On Target 🔗Event
Patterns:	
[on] [entity] target
[on] [entity] un[-]target
Since:	1.0
Called when a mob starts/stops following/attacking another entity, usually a player.
Examples:

On Teleport 🔗Event
Patterns:	
[on] [player] teleport[ing]
Since:	1.0
Called whenever a player is teleported, either by a nether/end portal or other means (e.g. by plugins).
Examples:

On Test Case 🔗Event
Patterns:	
[on] test %text% [when <.+>]
Since:	2.5
Contents represent one test case.
Examples:

On Tool Change 🔗Event
Patterns:	
[on] [player['s]] (tool|item held|held item) chang(e|ing)
Since:	1.0
Called whenever a player changes their held item by selecting a different slot (e.g. the keys 1-9 or the mouse wheel), not by dropping or replacing the item in the current slot.
Examples:

On Vehicle Create 🔗Event
Patterns:	
[on] vehicle create
[on] creat(e|ing|ion of) [a] vehicle
Since:	1.0
Called when a new vehicle is created, e.g. when a player places a boat or minecart.
Examples:

On Vehicle Damage 🔗Event
Patterns:	
[on] vehicle damage
[on] damag(e|ing) [a] vehicle
Since:	1.0
Called when a vehicle gets damage. Too much damage will destroy the vehicle.
Examples:

On Vehicle Destroy 🔗Event
Patterns:	
[on] vehicle destroy
[on] destr(oy[ing]|uction of) [a] vehicle
Since:	1.0
Called when a vehicle is destroyed. Any passenger will be ejected and the vehicle might drop some item(s).
Examples:

On Vehicle Enter 🔗Event
Patterns:	
[on] vehicle enter
[on] enter[ing] [a] vehicle
Since:	1.0
Called when an entity enters a vehicle, either deliberately (players) or by falling into them (mobs).
Examples:

On Vehicle Exit 🔗Event
Patterns:	
[on] vehicle exit
[on] exit[ing] [a] vehicle
Since:	1.0
Called when an entity exits a vehicle.
Examples:

On Weather Change 🔗Event
Patterns:	
[on] weather change [to %weather types%]
Since:	1.0
Called when a world's weather changes.
Examples:

On World Init 🔗Event
Patterns:	
[on] world init[ialization]
Since:	1.0
Called when a world is initialised. As all default worlds are initialised before any scripts are loaded, this event is only called for newly created worlds. World management plugins might change the behaviour of this event though.
Examples:

On World Load 🔗Event
Patterns:	
[on] world load[ing]
Since:	1.0
Called when a world is loaded. As with the world init event, this event will not be called for the server's default world(s).
Examples:

On World Save 🔗Event
Patterns:	
[on] world sav(e|ing)
Since:	1.0
Called when a world is saved to disk. Usually all worlds are saved simultaneously, but world management plugins could change this.
Examples:

On World Unload 🔗Event
Patterns:	
[on] world unload[ing]
Since:	1.0
Called when a world is unloaded. This event might never be called if you don't have a world management plugin.
Examples:

On Zombie Break Door 🔗Event
Patterns:	
[on] zombie break[ing] [a] [wood[en]] door
Since:	1.0
Called when a zombie is done breaking a wooden door. Can be cancelled to prevent the zombie from breaking the door.
Examples:

Periodical 🔗Event
Patterns:	
[on] every %time span%
Since:	1.0
An event that is called periodically.
Examples:

Periodical 🔗Event
Patterns:	
[on] every %time span% in [world[s]] %worlds%
Since:	1.0
An event that is called periodically.
Examples:

Attribute Type 🔗Type
Patterns:	
generic attack speed, luck, max health, generic movement speed, flying speed, attack damage, horse jump strength, generic attack damage, generic luck, generic armor, generic flying speed, follow range, generic knockback resistance, movement speed, generic follow range, zombie spawn reinforcements, armor, generic attack knockback, attack speed, armor toughness, knockback resistance, generic max health, attack knockback, generic armor toughness
Since:	2.5
Represents the type of an attribute. Note that this type does not contain any numerical values.See attribute types for more info.
Examples:

Biome 🔗Type
Patterns:	
roofed forest, old growth pine taiga, mesa forest, the void, snowy taiga, hell, jagged peaks, spiked ice plains, crimson forest, stone shore, birch forest, cold taiga, cold beach, savanna, giant tree taiga, marsh, windswept forest, wooded badlands, sky, nether, void, cold ocean, giant spruce taiga, lush caves, deep lukewarm ocean, deep frozen ocean, small end islands, ice spikes, old growth birch forest, badlands, badlands forest, ocean, lukewarm ocean, ice plains spikes, gravelly mountains, frozen peaks, stony peaks, jungle, basalt deltas, snowy beach, frozen ocean, mountains, forest, wooded mesa, eroded mesa, the end, dripstone caves, swampland, end barrens, ice plains with spikes, windswept hills, sea, unknown, black forest, soul sand valley, deep dark, mesa, plains, eroded badlands, mushroom fields, windswept gravelly hills, mushroom island, wooded mountains, shattered savanna, sunflower plains, snowy plains, meadow, snowy slopes, flower forest, windswept savanna, nether wastes, stony shore, taiga, frozen river, warm ocean, custom, old growth spruce taiga, deep cold ocean, swamp, mangrove swamp, deep ocean, end highlands, end midlands, cherry grove, sparse jungle, dark forest, jungle edge, grove, snowy tundra, beach, bamboo jungle, savanna plateau, river, tall birch forest, warped forest, desert
Since:	1.4.4
All possible biomes Minecraft uses to generate a world.
Examples:

Block 🔗Type
Patterns:	
Missing patterns.
Since:	1.0
A block in a world. It has a location and a type, and can also have a direction (mostly a facing), an inventory, or other special properties.
Examples:

Block Data 🔗Type
Patterns:	
Missing patterns.
Since:	2.5
Requirements:	Minecraft 1.13+
Block data is the detailed information about a block, referred to in Minecraft as BlockStates, allowing for the manipulation of different aspects of the block, including shape, waterlogging, direction the block is facing, and so much more. Information regarding each block's optional data can be found on Minecraft's Wiki. Find the block you're looking for and scroll down to 'Block States'. Different states must be separated by a semicolon (see examples). The 'minecraft:' namespace is optional, as well as are underscores.
Examples:

Boolean 🔗Type
Patterns:	
true/yes/on or false/no/off
Since:	1.0
A boolean is a value that is either true or false. Other accepted names are 'on' and 'yes' for true, and 'off' and 'no' for false.
Examples:

Cat Type 🔗Type
Patterns:	
red, all black, british shorthair, ragdoll, white, jellie, siamese, black, tabby, calico, persian
Since:	2.4
Requirements:	Minecraft 1.14 or newer
Represents the race/type of a cat entity.
Examples:

Chunk 🔗Type
Patterns:	
Missing patterns.
Since:	2.0
A chunk is a cuboid of 16×16×128 (x×z×y) blocks. Chunks are spread on a fixed rectangular grid in their world.
Examples:

Click Type 🔗Type
Patterns:	
lmb, number key, mmb, rmb, drop item, drop key, window border using left mouse button, unknown, window border using right mouse, shift+rmb, unsupported, shift+lmb, ctrl+q, swap shield, left mouse button, left mouse with shift, left mouse, 0-9, double click, double click using mouse, border using rmb, right mouse button, right mouse button with shift, border using lmb, middle mouse, drop key with control, window border using right mouse button, swap offhand, custom, q, right mouse with shift, middle mouse button, drop stack, left mouse button with shift, right mouse, creative action
Since:	2.2-dev16b, 2.2-dev35 (renamed to click type)
Click type, mostly for inventory events. Tells exactly which keys/buttons player pressed, assuming that default keybindings are used in client side.
Examples:

Color 🔗Type
Patterns:	
black, dark grey/dark gray, grey/light grey/gray/light gray/silver, white, blue/dark blue, cyan/aqua/dark cyan/dark aqua, light blue/light cyan/light aqua, green/dark green, light green/lime/lime green, yellow/light yellow, orange/gold/dark yellow, red/dark red, pink/light red, purple/dark purple, magenta/light purple, brown/indigo
Since:	Unknown
Wool, dye and chat colors.
Examples:

Command Sender 🔗Type
Patterns:	
use the console for the console
see player for players.
Since:	1.0
A player or the console.
Examples:

Damage Cause 🔗Type
Patterns:	
sweep attack, thorns, the void, magma, a lightning, drowning, dragonfire, an attack, drown, an entity attack, melt, freeze, falling block, contact, fire, an entity explosion, lightning, a fall, entity explosion, void, a lightning strike, suffocation, suicide, wither effect, a plugin, lightning strike, entity attack, a potion, a wither, sweeping, melting, a falling block, unknown, starvation, lava, fall, hot floor, attack, a block explosion, dryout, burn, hitting wall while flying, potion, flying into a wall, cramming, poison, sonic boom, suffocate, custom, a fire, burning, a projectile, plugin, wither potion effect, block explosion, projectile, wither, dragon's breath
Since:	2.0
The cause/type of a damage event, e.g. lava, fall, fire, drowning, explosion, poison, etc. Please note that support for this type is very rudimentary, e.g. lava, fire and burning, as well as projectile and attack are considered different types.
Examples:

Date 🔗Type
Patterns:	
Missing patterns.
Since:	1.4
A date is a certain point in the real world's time which can be obtained with now expression, unix date expression and date function. See time and timespan for the other time types of Skript.
Examples:

Difficulty 🔗Type
Patterns:	
normal, medium, hard, easy, peaceful
Since:	2.3
The difficulty of a world.
Examples:

Direction 🔗Type
Patterns:	
see direction (expression)
Since:	2.0
A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right, etc. Locations and some blocks also have a direction, but without a length. Please note that directions have changed extensively in the betas and might not work perfectly. They can also not be used as command arguments.
Examples:

Enchantment 🔗Type
Patterns:	
Efficiency, Looting, Soul Speed, Silk Touch, Quick Charge, Flame, Fortune, Aqua Affinity, Multishot, Channeling, Loyalty, Curse of Binding, Punch, Projectile Protection, Power, Sharpness, Frost Walker, Fire Protection, Impaling, Luck of The Sea, Riptide, Protection, Mending, Respiration, Piercing, Unbreaking, Swift Sneak, Feather Falling, Lure, Smite, Fire Aspect, Knockback, Depth Strider, Sweeping Edge, Infinity, Curse of Vanishing, Blast Protection, Bane of Arthropods, Thorns
Since:	1.4.6
An enchantment, e.g. 'sharpness' or 'fortune'. Unlike enchantment type this type has no level, but you usually don't need to use this type anyway.
Examples:

Enchantment Offer 🔗Type
Patterns:	
Missing patterns.
Since:	2.5
The enchantmentoffer in an enchant prepare event.
Examples:

Enchantment Type 🔗Type
Patterns:	
<enchantment> [<level>]
Since:	1.4.6
An enchantment with an optional level, e.g. 'sharpness 2' or 'fortune'.
Examples:

Entity 🔗Type
Patterns:	
player, op, wolf, tamed ocelot, powered creeper, zombie, unsaddled pig, fireball, arrow, dropped item, item frame, etc.
Since:	1.0
An entity is something in a world that's not a block, e.g. a player, a skeleton, or a zombie, but also projectiles like arrows, fireballs or thrown potions, or special entities like dropped items, falling blocks or paintings.
Examples:

Entity Type 🔗Type
Patterns:	
Detailed usage will be added eventually
Since:	1.3
The type of an entity, e.g. player, wolf, powered creeper, etc.
Examples:

Entity Type with Amount 🔗Type
Patterns:	
<number> <entity type>
Since:	1.3
An entity type with an amount, e.g. '2 zombies'. I might remove this type in the future and make a more general 'type' type, i.e. a type that has a number and a type.
Examples:

Experience 🔗Type
Patterns:	
[<number>] ([e]xp|experience [point[s]])
Since:	2.0
Experience points. Please note that Bukkit only allows to give XP, but not remove XP from players. You can however change a player's level and level progress freely.
Examples:

Firework Effect 🔗Type
Patterns:	
See Firework Types
Since:	2.4
A configuration of effects that defines the firework when exploded which can be used in the launch firework effect. See the firework effect expression for detailed patterns.
Examples:

Firework Type 🔗Type
Patterns:	
small, ball, star shaped, large, star, creeper face, small ball, large ball, burst, ball large, creeper
Since:	2.4
The type of a fireworkeffect.
Examples:

Game Mode 🔗Type
Patterns:	
adventure, survival, spectator, creative
Since:	1.0
The game modes survival, creative, adventure and spectator.
Examples:

Gamerule 🔗Type
Patterns:	
doWardenSpawning, tntExplosionDropDecay, globalSoundEvents, doFireTick, maxCommandChainLength, doVinesSpread, fireDamage, reducedDebugInfo, waterSourceConversion, disableElytraMovementCheck, lavaSourceConversion, announceAdvancements, drowningDamage, commandBlockOutput, forgiveDeadPlayers, doMobSpawning, maxEntityCramming, disableRaids, doWeatherCycle, mobExplosionDropDecay, doDaylightCycle, showDeathMessages, doTileDrops, universalAnger, playersSleepingPercentage, snowAccumulationHeight, doInsomnia, doImmediateRespawn, blockExplosionDropDecay, naturalRegeneration, doMobLoot, fallDamage, keepInventory, doEntityDrops, doLimitedCrafting, mobGriefing, randomTickSpeed, spawnRadius, freezeDamage, doTraderSpawning, commandModificationBlockLimit, logAdminCommands, spectatorsGenerateChunks, sendCommandFeedback, doPatrolSpawning
Since:	2.5
Requirements:	Minecraft 1.13 or newer
A gamerule
Examples:

Gamerule Value 🔗Type
Patterns:	
Missing patterns.
Since:	2.5
A wrapper for the value of a gamerule for a world.
Examples:

Gene 🔗Type
Patterns:	
normal, lazy, happy, worried, worrisome, aggressive, brown, brownish, savage, playful, wild, weak
Since:	2.4
Requirements:	Minecraft 1.14 or newer
Represents a Panda's main or hidden gene. See genetics for more info.
Examples:

Heal Reason 🔗Type
Patterns:	
an ender crystal, magic, a magic regeneration, magic regeneration, fed, sated, a magic regen, regen potion, a wither spawn, peaceful, unknown, a regeneration potion, consuming, a wither effect, peaceful regeneration, wither summoning, healing potion, wither potion, an end crystal, satiated, regeneration potion, potion, satisfied, ingesting, withered, custom, a wither spawning, end crystal, eating, wither spawning, a wither summoning, wither effect, a plugin, a regen potion, plugin, withering, a potion, wither spawn, a healing potion, ender crystal, magic regen, wither, peaceful regen
Since:	2.5
The heal reason in a heal event.
Examples:

Inventory 🔗Type
Patterns:	
Missing patterns.
Since:	1.0
An inventory of a player or block. Inventories have many effects and conditions regarding the items contained. An inventory has a fixed amount of slots which represent a specific place in the inventory, e.g. the helmet slot for players (Please note that slot support is still very limited but will be improved eventually).
Examples:

Inventory Action 🔗Type
Patterns:	
drop stack from slot, swap items with hotbar, swap cursor stack, pickup single item, pickup some, drop all from cursor, move to other inventory, drop cursor stack, pickup all, swap with hotbar, nothing, drop all from slot, swap cursor, drop cursor, pickup all items, drop slot item, place all, drop cursor item, drop slot stack, drop single item from slot, swap with cursor, place some, pickup one item, drop single item from cursor, collect items to cursor, unknown, clone stack, drop stack from cursor, drop one item from slot, drop one item from cursor, unsupported, do nothing, drop one from cursor, pickup half, drop items from slot, swap stack with cursor, place all items, collect to cursor, pickup some items, drop slot, drop items from cursor, hotbar move and readd, shift move, custom, pickup single, place one item, hotbar swap items, drop one from slot, place some items, place one, pickup half stack, instant move, hotbar swap
Since:	2.2-dev16
What player just did in inventory event. Note that when in creative game mode, most actions do not work correctly.
Examples:

Inventory Slot 🔗Type
Patterns:	
Missing patterns.
Since:	Unknown
Represents a single slot of an inventory. Notable slots are the armour slots and furnace slots. The most important property that distinguishes a slot from an item is its ability to be changed, e.g. it can be set, deleted, enchanted, etc. (Some item expressions can be changed as well, e.g. items stored in variables. For that matter: slots are never saved to variables, only the items they represent at the time when the variable is set). Please note that tool can be regarded a slot, but it can actually change it's position, i.e. doesn't represent always the same slot.
Examples:

Inventory Type 🔗Type
Patterns:	
barrel inventory, a loom inventory, a blast furnace inventory, workbench inventory, ender chest inventory, loom inventory, a workbench inventory, hopper inventory, a merchant inventory, a hopper inventory, chiseled bookshelf, an ender chest inventory, new smithing table, bookshelf, a jukebox, beacon inventory, shulker box inventory, a barrel inventory, a shulker box inventory, lectern inventory, chest inventory, a villager inventory, a smoker inventory, a brewing stand inventory, a smithing inventory, grindstone inventory, a crafting table inventory, a player inventory, furnace inventory, a creative inventory, blast furnace inventory, upgrade gear, a composter inventory, an enchanting table inventory, jukebox, a dropper inventory, a cartography table inventory, a upgrade gear, smoker inventory, composter inventory, a chest inventory, upgrade gear table, a upgrade gear table, dispenser inventory, player inventory, stonecutter inventory, a stonecutter inventory, a lectern inventory, merchant inventory, cartography table inventory, a chiseled bookshelf, a new smithing table, a furnace inventory, anvil inventory, a dispenser inventory, a grindstone inventory, smithing inventory, dropper inventory, brewing stand inventory, villager inventory, enchanting table inventory, a beacon inventory, a bookshelf, creative inventory, crafting table inventory, an anvil inventory
Since:	2.2-dev32
Minecraft has several different inventory types with their own use cases.
Examples:

Item 🔗Type
Patterns:	
[<number> [of]] <alias> [of <enchantment> <level>], Where <alias> must be an alias that represents exactly one item (i.e cannot be a general alias like 'sword' or 'plant')
Since:	1.0
An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2. Unlike item type an item can only represent exactly one item (e.g. an upside-down cobblestone stair facing west), while an item type can represent a whole range of items (e.g. any cobble stone stairs regardless of direction). You don't usually need this type except when you want to make a command that only accepts an exact item. Please note that currently 'material' is exactly the same as 'item', i.e. can have an amount & enchantments.
Examples:

Item Type 🔗Type
Patterns:	
[<number> [of]] [all/every] <alias> [of <enchantment> [<level>] [,/and <more enchantments...>]]
Since:	1.0
An item type is an alias, e.g. 'a pickaxe', 'all plants', etc., and can result in different items when added to an inventory, and unlike items they are well suited for checking whether an inventory contains a certain item or whether a certain item is of a certain type. An item type can also have one or more enchantments with or without a specific level defined, and can optionally start with 'all' or 'every' to make this item type represent all types that the alias represents, including data ranges.
Examples:

Living Entity 🔗Type
Patterns:	
see entity, but ignore inanimate objects
Since:	1.0
A living entity, i.e. a mob or player, not inanimate entities like projectiles or dropped items.
Examples:

Location 🔗Type
Patterns:	
Missing patterns.
Since:	1.0
A location in a world. Locations are world-specific and even store a direction, e.g. if you save a location and later teleport to it you will face the exact same direction you did when you saved the location.
Examples:

Metadata Holder 🔗Type
Patterns:	
Missing patterns.
Since:	2.2-dev36
Something that can hold metadata (e.g. an entity or block)
Examples:

Money 🔗Type
Patterns:	
<number> $ or $ <number>, where '$' is your server's currency, e.g. '10 rupees' or '£5.00'
Since:	2.0
Requirements:	Vault, an economy plugin that supports Vault
A certain amount of money. Please note that this differs from numbers as it includes a currency symbol or name, but usually the two are interchangeable, e.g. you can both add 100$ to the player's balance and add 100 to the player's balance.
Examples:

Moon Phase 🔗Type
Patterns:	
last quarter, waning crescent, waxing gibbous, full moon, waning gibbous, waxing crescent, new moon, first quarter
Since:	2.7
Requirements:	Paper 1.16+
Represents the phase of a moon.
Examples:

Number 🔗Type
Patterns:	
[-]###[.###] (any amount of digits; very large numbers will be truncated though)
Since:	1.0
A number, e.g. 2.5, 3, or -9812454. Please note that many expressions only need integers, i.e. will discard any fractional parts of any numbers without producing an error.
Examples:

Object 🔗Type
Patterns:	
Missing patterns.
Since:	1.0
The supertype of all types, meaning that if %object% is used in e.g. a condition it will accept all kinds of expressions.
Examples:

Offline Player 🔗Type
Patterns:	
Missing patterns.
Since:	Unknown
A player that is possibly offline. See player for more information. Please note that while all effects and conditions that require a player can be used with an offline player as well, they will not work if the player is not actually online.
Examples:

Player 🔗Type
Patterns:	
Missing patterns.
Since:	1.0
A player. Depending on whether a player is online or offline several actions can be performed with them, though you won't get any errors when using effects that only work if the player is online (e.g. changing their inventory) on an offline player. You have two possibilities to use players as command arguments: <player> and <offline player>. The first requires that the player is online and also accepts only part of the name, while the latter doesn't require that the player is online, but the player's name has to be entered exactly.
Examples:

Potion Effect 🔗Type
Patterns:	
speed of tier 1 for 10 seconds
Since:	2.5.2
A potion effect, including the potion effect type, tier and duration.
Examples:

Potion Effect Type 🔗Type
Patterns:	
null, speed, slowness, haste, mining fatigue, strength, instant health, instant damage, jump boost, nausea, regeneration, resistance, fire resistance, water breathing, invisibility, blindness, night vision, hunger, weakness, poison, wither, health boost, absorption, saturation, glowing, levitation, luck, bad luck, slow falling, conduit power, dolphins grace, bad omen, hero of the village, darkness
Since:	Unknown
A potion effect type, e.g. 'strength' or 'swiftness'.
Examples:

Projectile 🔗Type
Patterns:	
arrow, fireball, snowball, thrown potion, etc.
Since:	1.0
A projectile, e.g. an arrow, snowball or thrown potion.
Examples:

Region 🔗Type
Patterns:	
"region name"
Since:	2.1
Requirements:	Supported regions plugin
A region of a regions plugin. Skript currently supports WorldGuard, Factions, GriefPrevention and PreciousStones. Please note that some regions plugins do not have named regions, some use numerical ids to identify regions, and some may have regions with the same name in different worlds, thus using regions like "region name" in scripts may or may not work.
Examples:

Resource Pack State 🔗Type
Patterns:	
refused, rejected, accepted, failed, failed to download, successfully loaded, accept, fail, successfully load, refuse, declined, successfully install, success, reject, decline, successfully installed, download fail
Since:	2.4
The state in a resource pack request response event.
Examples:

Server Icon 🔗Type
Patterns:	
Missing patterns.
Since:	2.3
A server icon that was loaded using the load server icon effect.
Examples:

Sound Category 🔗Type
Patterns:	
hostile creatures category, speech category, records category, friendly creature category, noteblock category, hostile creature category, note block category, voice category, ambient category, noteblocks category, note blocks category, weather category, block category, friendly mob category, jukebox category, hostile mob category, master category, master volume category, hostile category, record category, blocks category, environment category, jukeboxes category, player category, players category, hostile mobs category, friendly mobs category, music category, friendly creatures category, neutral category
Since:	2.4
The category of a sound, they are used for sound options of Minecraft. See the play sound and stop sound effects.
Examples:

Spawn Reason 🔗Type
Patterns:	
dispense egg, egg, village defense, ocelot baby, silverfish trap, village invading, trap, dispensing egg, shoulder, drowned, metamorphosis, lightning, silverfish reveal, spell, built iron golem, natural, village invasion, frozen, mount, build wither, built wither, iron golem defense, ender pearl, creature spawner, reinforcements, build snowman, build iron golem, breeding, raid, infection, customized, spawn egg, jockey, beehive, default, golem defense, patrol, slime split, infected, sheared, mob spawner, nether portal, shear, perching, custom, built snowman, chunk generation, breed, command, duplication, explosion, spawner, cured, customised, piglin zombification
Since:	2.3
The spawn reason in a spawn event.
Examples:

Teleport Cause 🔗Type
Patterns:	
nether portal, ender gateway, chorus fruit, ender portal, command, unknown, plugin, dismounted, ender pearl, spectator, spectate, end gateway, chorus, gateway, dismount, end portal
Since:	2.2-dev35
The teleport cause in a teleport event.
Examples:

Text 🔗Type
Patterns:	
simple: "..."
quotes: "...""..."
expressions: "...%expression%..."
percent signs: "...%%..."
Since:	1.0
Text is simply text, i.e. a sequence of characters, which can optionally contain expressions which will be replaced with a meaningful representation (e.g. %player% will be replaced with the player's name). Because scripts are also text, you have to put text into double quotes to tell Skript which part of the line is an effect/expression and which part is the text. Please read the article on Texts and Variable Names to learn more.
Examples:

Time 🔗Type
Patterns:	
##:##
##[:##][ ]am/pm
Since:	1.0
A time is a point in a minecraft day's time (i.e. ranges from 0:00 to 23:59), which can vary per world. See date and timespan for the other time types of Skript.
Examples:

Timeperiod 🔗Type
Patterns:	
##:## - ##:##
dusk/day/dawn/night
Since:	1.0
A period of time between two times. Mostly useful since you can use this to test for whether it's day, night, dusk or dawn in a specific world. This type might be removed in the future as you can use 'time of world is between x and y' as a replacement.
Examples:

Timespan 🔗Type
Patterns:	
<number> [minecraft/mc/real/rl/irl] ticks/seconds/minutes/hours/days/weeks/months/years [[,/and] <more...>]
[###:]##:##[.####] ([hours:]minutes:seconds[.milliseconds])
Since:	1.0, 2.6.1 (weeks, months, years)
A timespan is a difference of two different dates or times, e.g '10 minutes'. Timespans are always displayed as real life time, but can be defined as minecraft time, e.g. '5 minecraft days and 12 hours'. NOTE: Months always have the value of 30 days, and years of 365 days. See date and time for the other time types of Skript.
Examples:

Tree Type 🔗Type
Patterns:	
[any] <general tree/mushroom type>, e.g. tree/any jungle tree/etc.
<specific tree/mushroom species>, e.g. red mushroom/small jungle tree/big regular tree/etc.
Since:	Unknown
A tree type represents a tree species or a huge mushroom species. These can be generated in a world with the generate tree effect.
Examples:

Type 🔗Type
Patterns:	
See the type name patterns of all types - including this one
Since:	2.0
Represents a type, e.g. number, object, item type, location, block, world, entity type, etc. This is mostly used for expressions like 'event-<type>', '<type>-argument', 'loop-<type>', etc., e.g. event-world, number-argument and loop-player.
Examples:

Vector 🔗Type
Patterns:	
vector(x, y, z)
Since:	2.2-dev23
Vector is a collection of numbers. In Minecraft, 3D vectors are used to express velocities of entities.
Examples:

Visual Effect 🔗Type
Patterns:	
smoke, potion break, ender signal, mobspawner flames, arrow particles, jumping rabbit, hurt, wolf smoke, wolf hearts, wolf shaking, sheep eating, iron golem offering rose, villager hearts, angry villager entity, happy villager entity, witch magic, zombie turning to a villager, firework explosion, love hearts, squid rotation reset, entity poof, guardian target, block with shield, shield break, armor stand hit, hurt by thorns, iron golem sheathing rose, resurrection by totem, hurt by drowning, hurt by explosion, explosion, large explosion, huge explosion, firework's spark, water bubble, water splash, water wake, suspended, void fog, critical hit, magical critical hit, smoke particle, large smoke, spell, spell, potion swirl, transparent potion swirl, witch spell, water drip, lava drip, angry villager, happy villager, small smoke, note, portal, flying glyph, flame, lava pop, cloud, coloured dust, snowball break, snow shovel, slime, heart, item crack, block break, block dust, water drop, mob appearance, dragon breath, end rod, damage indicator, sweep attack, falling dust, totem, spit, squid ink, bubble pop, current down, bubble column up, nautilus, dolphin, sneeze, campfire cosy smoke, campfire signal smoke, composter, flash, falling lava, landing lava, falling water, dripping honey, falling honey, landing honey, falling nectar, soul fire flame, ash, crimson spore, warped spore, soul, dripping obsidian tear, falling obsidian tear, landing obsidian tear, reverse portal, white ash, falling spore blossom, spore blossom air, small flame, snowflake, dripping dripstone lava, falling dripstone lava, dripping dripstone water, falling dripstone water, glow squid ink, glow, wax on, wax off, electric spark, scrape, sonic boom, sculk soul, sculk charge, sculk charge pop, shriek, dripping cherry leaves, falling cherry leaves, landing cherry leaves
Since:	2.1
A visible effect, e.g. particles.
Examples:

Weather Type 🔗Type
Patterns:	
clear/sun/sunny, rain/rainy/raining, and thunder/thundering/thunderstorm
Since:	1.0
The weather types sunny, rainy, and thundering.
Examples:

World 🔗Type
Patterns:	
"world_name", e.g. "world"
Since:	1.0, 2.2 (alternate syntax)
One of the server's worlds. Worlds can be put into scripts by surrounding their name with double quotes, e.g. "world_nether", but this might not work reliably as text uses the same syntax.
Examples:

World Environment 🔗Type
Patterns:	
normal, nether, the end, the overworld, custom, the nether, end, overworld
Since:	2.7
Represents the environment of a world.
Examples:

abs 🔗Function
Patterns:	
abs(n: number)
Since:	2.2
Return Type:	Number
Returns the absolute value of the argument, i.e. makes the argument positive.
Examples:

acos 🔗Function
Patterns:	
acos(n: number)
Since:	2.2
Return Type:	Number
The inverse of the cosine, also called arccos. Returns result in degrees, not radians. Only returns values from 0 to 180.
Examples:

asin 🔗Function
Patterns:	
asin(n: number)
Since:	2.2
Return Type:	Number
The inverse of the sine, also called arcsin. Returns result in degrees, not radians. Only returns values from -90 to 90.
Examples:

atan 🔗Function
Patterns:	
atan(n: number)
Since:	2.2
Return Type:	Number
The inverse of the tangent, also called arctan. Returns result in degrees, not radians. Only returns values from -90 to 90.
Examples:

atan2 🔗Function
Patterns:	
atan2(x: number, y: number)
Since:	2.2
Return Type:	Number
Similar to atan, but requires two coordinates and returns values from -180 to 180. The returned angle is measured counterclockwise in a standard mathematical coordinate system (x to the right, y to the top).
Examples:

calcExperience 🔗Function
Patterns:	
calcExperience(level: long)
Since:	2.2-dev32
Return Type:	long
Calculates the total amount of experience needed to achieve given level from scratch in Minecraft.
Examples:

caseEquals 🔗Function
Patterns:	
caseEquals(strs: strings)
Since:	2.5
Return Type:	Boolean
Checks if the contents of a list of strings are strictly equal with case sensitivity.
Examples:

ceil 🔗Function
Patterns:	
ceil(n: number)
Since:	2.2
Return Type:	long
Rounds a number up, i.e. returns the closest integer larger than or equal to the argument.
Examples:

ceiling 🔗Function
Patterns:	
ceiling(n: number)
Since:	2.2
Return Type:	long
Alias of ceil.
Examples:

cos 🔗Function
Patterns:	
cos(n: number)
Since:	2.2
Return Type:	Number
The cosine function. This is basically the sine shifted by 90°, i.e. cos(a) = sin(a + 90°), for any number a. Uses degrees, not radians.
Examples:

date 🔗Function
Patterns:	
date(year: number, month: number, day: number, hour: number = [[integer:0]], minute: number = [[integer:0]], second: number = [[integer:0]], millisecond: number = [[integer:0]], zone_offset: number = [[double:NaN]], dst_offset: number = [[double:NaN]])
Since:	2.2
Return Type:	Date
Creates a date from a year, month, and day, and optionally also from hour, minute, second and millisecond. A time zone and DST offset can be specified as well (in minutes), if they are left out the server's time zone and DST offset are used (the created date will not retain this information).
Examples:

exp 🔗Function
Patterns:	
exp(n: number)
Since:	2.2
Return Type:	Number
The exponential function. You probably don't need this if you don't know what this is.
Examples:

floor 🔗Function
Patterns:	
floor(n: number)
Since:	2.2
Return Type:	long
Rounds a number down, i.e. returns the closest integer smaller than or equal to the argument.
Examples:

ln 🔗Function
Patterns:	
ln(n: number)
Since:	2.2
Return Type:	Number
The natural logarithm. You probably don't need this if you don't know what this is. Returns NaN (not a number) if the argument is negative.
Examples:

location 🔗Function
Patterns:	
location(x: number, y: number, z: number, world: world = event-world, yaw: number = [[integer:0]], pitch: number = [[integer:0]])
Since:	2.2
Return Type:	Location
Creates a location from a world and 3 coordinates, with an optional yaw and pitch. If for whatever reason the world is not found, it will fallback to the server's main world.
Examples:

log 🔗Function
Patterns:	
log(n: number, base: number = [[integer:10]])
Since:	2.2
Return Type:	Number
A logarithm, with base 10 if none is specified. This is the inverse operation to exponentiation (for positive bases only), i.e. log(base ^ exponent, base) = exponent for any positive number 'base' and any number 'exponent'. Another useful equation is base ^ log(a, base) = a for any numbers 'base' and 'a'. Please note that due to how numbers are represented in computers, these equations do not hold for all numbers, as the computed values may slightly differ from the correct value. Returns NaN (not a number) if any of the arguments are negative.
Examples:

max 🔗Function
Patterns:	
max(ns: numbers)
Since:	2.2
Return Type:	Number
Returns the maximum number from a list of numbers.
Examples:

min 🔗Function
Patterns:	
min(ns: numbers)
Since:	2.2
Return Type:	Number
Returns the minimum number from a list of numbers.
Examples:

mod 🔗Function
Patterns:	
mod(d: number, m: number)
Since:	2.2
Return Type:	Number
Returns the modulo of the given arguments, i.e. the remainder of the division d/m, where d and m are the arguments of this function. The returned value is always positive. Returns NaN (not a number) if the second argument is zero.
Examples:

product 🔗Function
Patterns:	
product(ns: numbers)
Since:	2.2
Return Type:	Number
Calculates the product of a list of numbers.
Examples:

rgb 🔗Function
Patterns:	
rgb(red: long, green: long, blue: long)
Since:	2.5
Return Type:	Color
Returns a RGB color from the given red, green and blue parameters.
Examples:

round 🔗Function
Patterns:	
round(n: number, d: number = [[integer:0]])
Since:	2.2, 2.7 (decimal placement)
Return Type:	Number
Rounds a number, i.e. returns the closest integer to the argument. Place a second argument to define the decimal placement.
Examples:

sin 🔗Function
Patterns:	
sin(n: number)
Since:	2.2
Return Type:	Number
The sine function. It starts at 0° with a value of 0, goes to 1 at 90°, back to 0 at 180°, to -1 at 270° and then repeats every 360°. Uses degrees, not radians.
Examples:

sqrt 🔗Function
Patterns:	
sqrt(n: number)
Since:	2.2
Return Type:	Number
The square root, which is the inverse operation to squaring a number (for positive numbers only). This is the same as (argument) ^ (1/2) – other roots can be calculated via number ^ (1/root), e.g. set {_l} to {_volume}^(1/3). Returns NaN (not a number) if the argument is negative.
Examples:

sum 🔗Function
Patterns:	
sum(ns: numbers)
Since:	2.2
Return Type:	Number
Sums a list of numbers.
Examples:

tan 🔗Function
Patterns:	
tan(n: number)
Since:	2.2
Return Type:	Number
The tangent function. This is basically sin(arg)/cos(arg). Uses degrees, not radians.
Examples:

vector 🔗Function
Patterns:	
vector(x: number, y: number, z: number)
Since:	2.2-dev23
Return Type:	Vector
Creates a new vector, which can be used with various expressions, effects and functions.
Examples:

world 🔗Function
Patterns:	
world(name: string)
Since:	2.2
Return Type:	World
Gets a world from its name.
Examples:

